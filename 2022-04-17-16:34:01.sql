-- MySQL dump 10.13  Distrib 5.7.29, for Linux (x86_64)
--
-- Host: localhost    Database: solo
-- ------------------------------------------------------
-- Server version	5.7.29

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `b3_solo_archivedate`
--

DROP TABLE IF EXISTS `b3_solo_archivedate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_archivedate` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `archiveTime` bigint(20) NOT NULL COMMENT '存档日期时间，该月份第一天的时间戳',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='存档日期表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_archivedate`
--

LOCK TABLES `b3_solo_archivedate` WRITE;
/*!40000 ALTER TABLE `b3_solo_archivedate` DISABLE KEYS */;
INSERT INTO `b3_solo_archivedate` VALUES ('1556594817161',1554048000000),('1557371972820',1556640000000),('1561696028392',1559318400000),('1562038406821',1561910400000),('1570593659855',1569859200000),('1576049668352',1575129600000),('1581068229813',1580486400000),('1595084400658',1593532800000),('1596364155560',1596211200000),('1598948074301',1598889600000),('1609317484330',1606752000000),('1609990221352',1609430400000),('1618910240067',1617206400000),('1624529804786',1622476800000);
/*!40000 ALTER TABLE `b3_solo_archivedate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_archivedate_article`
--

DROP TABLE IF EXISTS `b3_solo_archivedate_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_archivedate_article` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `archiveDate_oId` varchar(19) NOT NULL COMMENT '存档日期 id',
  `article_oId` varchar(19) NOT NULL COMMENT '文章 id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='存档-文章关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_archivedate_article`
--

LOCK TABLES `b3_solo_archivedate_article` WRITE;
/*!40000 ALTER TABLE `b3_solo_archivedate_article` DISABLE KEYS */;
INSERT INTO `b3_solo_archivedate_article` VALUES ('1556596262514','1556594817161','1556596262355'),('1556596358090','1556594817161','1556596357932'),('1556596394025','1556594817161','1556596393870'),('1556596434893','1556594817161','1556596434737'),('1556596469769','1556594817161','1556596469614'),('1556596495027','1556594817161','1556596494920'),('1556596523549','1556594817161','1556596523393'),('1556596564037','1556594817161','1556596563930'),('1556596596735','1556594817161','1556596596631'),('1556596619881','1556594817161','1556596619723'),('1556596642056','1556594817161','1556596641898'),('1556596671358','1556594817161','1556596671249'),('1556596698717','1556594817161','1556596698613'),('1556596733259','1556594817161','1556596733155'),('1556596764916','1556594817161','1556596764806'),('1556596791918','1556594817161','1556596791813'),('1556596811575','1556594817161','1556596811470'),('1556596835201','1556594817161','1556596835045'),('1556596861801','1556594817161','1556596861593'),('1556596885806','1556594817161','1556596885650'),('1556596921835','1556594817161','1556596921731'),('1556596945006','1556594817161','1556596944902'),('1556596969099','1556594817161','1556596968993'),('1556597006730','1556594817161','1556597006626'),('1556597029842','1556594817161','1556597029688'),('1556597075835','1556594817161','1556597075731'),('1556597100095','1556594817161','1556597099988'),('1556597259924','1556594817161','1556597259818'),('1556597289699','1556594817161','1556597289595'),('1556597317434','1556594817161','1556597317330'),('1556597350461','1556594817161','1556597350358'),('1556597375931','1556594817161','1556597375826'),('1556597397941','1556594817161','1556597397837'),('1556597424319','1556594817161','1556597424214'),('1556597449062','1556594817161','1556597448957'),('1556597472015','1556594817161','1556597471911'),('1556597495750','1556594817161','1556597495591'),('1556597518659','1556594817161','1556597518556'),('1556597542449','1556594817161','1556597542345'),('1556597576508','1556594817161','1556597576302'),('1556597596734','1556594817161','1556597596626'),('1556597671636','1556594817161','1556597671424'),('1556597690141','1556594817161','1556597690037'),('1556597714463','1556594817161','1556597714304'),('1556597737103','1556594817161','1556597736999'),('1556597763690','1556594817161','1556597763587'),('1556597791260','1556594817161','1556597791101'),('1556597812831','1556594817161','1556597812726'),('1556597834802','1556594817161','1556597834695'),('1556597881533','1556594817161','1556597881370'),('1556597905912','1556594817161','1556597905706'),('1556597930629','1556594817161','1556597930465'),('1556597960199','1556594817161','1556597960094'),('1556597984883','1556594817161','1556597984728'),('1556598007398','1556594817161','1556598007294'),('1556598031529','1556594817161','1556598031426'),('1556598056099','1556594817161','1556598055996'),('1556598080952','1556594817161','1556598080848'),('1556598101765','1556594817161','1556598101661'),('1556598125989','1556594817161','1556598125885'),('1556598147866','1556594817161','1556598147706'),('1556598173682','1556594817161','1556598173527'),('1556598193080','1556594817161','1556598192921'),('1556598212294','1556594817161','1556598212191'),('1556598233114','1556594817161','1556598233011'),('1556598252308','1556594817161','1556598252203'),('1556598273946','1556594817161','1556598273842'),('1557371972874','1557371972820','1557371972715'),('1561696028443','1561696028392','1561696028187'),('1562038406874','1562038406821','1562038406615'),('1570593659908','1570593659855','1570593659752'),('1570594803195','1570593659855','1570594803091'),('1576049668403','1576049668352','1576049668148'),('1576049827814','1576049668352','1576049827658'),('1576050228847','1576049668352','1576050228745'),('1576121885344','1576049668352','1576121885241'),('1581068229866','1581068229813','1581068229696'),('1595084400709','1595084400658','1595084400553'),('1595088382101','1595084400658','1595088381996'),('1595473455371','1595084400658','1595473455262'),('1596364155611','1596364155560','1596360977561'),('1596364302456','1596364155560','1596271612481'),('1596364322354','1596364155560','1596338434581'),('1596364332689','1596364155560','1596257551654'),('1596364342464','1595084400658','1596119248415'),('1596364366935','1595084400658','1596031678861'),('1596364381115','1595084400658','1595946744185'),('1596364417372','1595084400658','1595864940138'),('1596364435871','1595084400658','1595777765184'),('1596382727599','1596364155560','1596382727444'),('1596465933526','1596364155560','1596460633066'),('1596470957544','1596364155560','1596470957440'),('1596641885757','1596364155560','1596641885653'),('1596730122254','1596364155560','1596730122149'),('1596818250589','1596364155560','1596818250484'),('1596988456470','1596364155560','1596988456366'),('1597161345553','1596364155560','1597161345449'),('1597515723707','1596364155560','1597515723604'),('1597586882740','1596364155560','1597580375945'),('1597591639779','1596364155560','1597591639675'),('1597631658980','1596364155560','1597631658876'),('1597938904308','1596364155560','1597938904204'),('1598199031667','1596364155560','1598199031563'),('1598948074352','1598948074301','1598948074188'),('1599580040877','1598948074301','1599573926412'),('1599620870613','1598948074301','1599620870505'),('1599623436367','1598948074301','1599623436262'),('1599623898693','1598948074301','1599623898589'),('1599639803042','1598948074301','1599639802888'),('1599706260295','1598948074301','1599706260190'),('1599706890426','1598948074301','1599706890321'),('1599711858009','1598948074301','1599711857903'),('1599724496016','1598948074301','1599724495911'),('1599751528669','1598948074301','1599749202791'),('1599811327727','1598948074301','1599811327623'),('1600520752183','1598948074301','1600271837519'),('1609317484382','1609317484330','1609317484090'),('1609990221404','1609990221352','1609990221216'),('1618910240119','1618910240067','1618910239911'),('1618976000965','1618910240067','1618976000860'),('1624529804849','1624529804786','1624529804489');
/*!40000 ALTER TABLE `b3_solo_archivedate_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_article`
--

DROP TABLE IF EXISTS `b3_solo_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_article` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `articleTitle` varchar(255) NOT NULL COMMENT '文章标题',
  `articleAbstract` text NOT NULL COMMENT '文章摘要 Markdown',
  `articleAbstractText` text NOT NULL COMMENT '文章摘要纯文本',
  `articleTags` text NOT NULL COMMENT '文章标签，英文逗号分隔',
  `articleAuthorId` varchar(19) NOT NULL COMMENT '文章作者 id',
  `articleContent` mediumtext NOT NULL COMMENT '文章正文内容',
  `articlePermalink` varchar(255) NOT NULL COMMENT '文章访问路径',
  `articlePutTop` char(1) NOT NULL COMMENT '文章是否置顶',
  `articleCreated` bigint(20) NOT NULL COMMENT '文章创建时间戳',
  `articleUpdated` bigint(20) NOT NULL COMMENT '文章更新时间戳',
  `articleRandomDouble` double NOT NULL COMMENT '文章随机数，用于快速查询随机文章列表',
  `articleSignId` varchar(19) NOT NULL COMMENT '文章关联的签名档 id',
  `articleViewPwd` varchar(128) NOT NULL COMMENT '文章浏览密码，留空为不设置访问密码',
  `articleImg1URL` varchar(255) NOT NULL COMMENT '文章首图地址',
  `articleStatus` int(11) NOT NULL COMMENT '文章状态，0：已发布，1：草稿',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='文章表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_article`
--

LOCK TABLES `b3_solo_article` WRITE;
/*!40000 ALTER TABLE `b3_solo_article` DISABLE KEYS */;
INSERT INTO `b3_solo_article` VALUES ('1556596262355','开源的对象存储','\n\n\n\n\n\n\n\n','github地址https://github.com/minio/minio 支持多种开发语言的接口，小巧，使用简单。 Ubuntu使用方法如下： 1. 先安装docker，apt-get install docker.io (这种一般安装的不是最新版的，参考我的另一篇文章) 2. docker pull minio/minio 3. docker run -p 9000:9000 –name minio1  -e “MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE”  -e “MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY”  minio/minio server /data 4. 浏览器访问localhost:9000 ,账号密码就是上边的ACCESS_KEY SECRET_KEY','存储','1556594816141','github地址https://github.com/minio/minio\r\n支持多种开发语言的接口，小巧，使用简单。\r\nUbuntu使用方法如下：\r\n1. 先安装docker，apt-get install docker.io (这种一般安装的不是最新版的，参考我的另一篇文章)\r\n2. docker pull minio/minio\r\n3. docker run -p 9000:9000 --name minio1 \\\r\n  -e \"MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\" \\\r\n  -e \"MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" \\\r\n  minio/minio server /data\r\n4. 浏览器访问localhost:9000 ,账号密码就是上边的ACCESS_KEY  SECRET_KEY','/articles/2019/04/30/1556596262355.html','0',1556596262460,1556596262460,0.9942903917256195,'1','','https://img.hacpai.com/bing/20180423.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596357932','Ubuntu安装Python2.7.6','','https://blog.csdn.net/qq_27062249/article/details/79478533','python','1556594816141','[https://blog.csdn.net/qq_27062249/article/details/79478533](https://blog.csdn.net/qq_27062249/article/details/79478533)','/articles/2019/04/30/1556596357932.html','0',1556596358037,1556596358037,0.82041564165227,'1','','https://img.hacpai.com/bing/20190123.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596393870','vultr vps使用bbr加速','','我的vps是Ubuntu16.04 wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh','linux','1556594816141','我的vps是Ubuntu16.04\r\n```\r\nwget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\r\nchmod +x bbr.sh\r\n./bbr.sh\r\n```','/articles/2019/04/30/1556596393870.html','0',1556596393973,1556596393973,0.8068025221898116,'1','','https://img.hacpai.com/bing/20190109.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596434737','ubuntu16.04 安装 docker-compose','','curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose 添加执行权限 chmod +x /usr/local/bin/docker-compose 查看是否安装成功 docker-compose -v','docker','1556594816141','```\r\ncurl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\r\n添加执行权限\r\nchmod +x /usr/local/bin/docker-compose\r\n查看是否安装成功\r\ndocker-compose -v\r\n```','/articles/2019/04/30/1556596434737.html','0',1556596434840,1556596434840,0.12397749125153179,'1','','https://img.hacpai.com/bing/20190422.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596469614','ansible学习 记录','','ansible hosts配置 如果是使用命令执行的话默认是用的 /etc/ansible/host 中配置的host，也可以自定义hosts，并在执行命令的时候指定，自定义hosts如下（使用 -i指定 ansible-playbook -i hostslist test.yml）： [node] 172.30.81.201 ansible_ssh_user=root ansible_ssh_pass=1 node_ip=172.30.81.201 data_device=/dev/mdb [node:vars] keepalive_vip=172.30.81.200 ansible_python_interpreter=/usr/bin/python3   hosts常用参数配置   ansible_ssh_host # 目标主机地址 ansible_ssh_port # 目标主机端口，默认22 ansible_ssh_user # 目标主机用户 ansible_ssh_pass # 目标主机ssh密码 ansible_sudo_pass # sudo密码 ansible_sudo....','ansible','1556594816141','1. ansible hosts配置\r\n	如果是使用命令执行的话默认是用的 /etc/ansible/host 中配置的host，也可以自定义hosts，并在执行命令的时候指定，自定义hosts如下（使用 -i指定 ansible-playbook -i hostslist test.yml）：\r\n	```\r\n	[node]\r\n	172.30.81.201 ansible_ssh_user=root ansible_ssh_pass=1 node_ip=172.30.81.201 data_device=/dev/mdb\r\n	[node:vars]\r\n	keepalive_vip=172.30.81.200\r\n	ansible_python_interpreter=/usr/bin/python3\r\n	```\r\n2. hosts常用参数配置\r\n```\r\n	ansible_ssh_host                    # 目标主机地址\r\n    ansible_ssh_port                    # 目标主机端口，默认22\r\n    ansible_ssh_user                    # 目标主机用户\r\n    ansible_ssh_pass                    # 目标主机ssh密码\r\n    ansible_sudo_pass                 # sudo密码\r\n    ansible_sudo_exe                    \r\n    ansible_connection               # 与主机的连接类型，比如：local,ssh或者paramiko\r\n    ansible_ssh_private_key_file  # 私钥地址\r\n    ansible_shell_type                 # 目标系统的shell类型\r\n    ansible_python_interpreter   # python版本\r\n```\r\n3. 使用ansible awx时，使用的hosts不是/etc/ansible/hosts中配置的，使用的是在inventories-->hosts中配置的，如：\r\n![](http://blog.ityousee.com/1.png)\r\n4. 在docker中安装ansible awx\r\n```\r\n从https://github.com/ansible/awx.git下载源码，配置文件为installer/inventory\r\n$ cd installer\r\n$ ansible-playbook -i inventory install.yml\r\n执行完之后会启动如下几个容器\r\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                NAMES\r\ne240ed8209cd        awx_task:1.0.0.8    \"/tini -- /bin/sh ...\"   2 minutes ago       Up About a minute   8052/tcp                             awx_task\r\n1cfd02601690        awx_web:1.0.0.8     \"/tini -- /bin/sh ...\"   2 minutes ago       Up About a minute   0.0.0.0:80->8052/tcp                 awx_web\r\n55a552142bcd        memcached:alpine    \"docker-entrypoint...\"   2 minutes ago       Up 2 minutes        11211/tcp                            memcached\r\n84011c072aad        rabbitmq:3          \"docker-entrypoint...\"   2 minutes ago       Up 2 minutes        4369/tcp, 5671-5672/tcp, 25672/tcp   rabbitmq\r\n97e196120ab3        postgres:9.6        \"docker-entrypoint...\"   2 minutes ago       Up 2 minutes        5432/tcp                             postgres\r\n浏览器输入 localhost:8052\r\n账号：admin\r\n密码：password\r\n```\r\n','/articles/2019/04/30/1556596469614.html','0',1556596469717,1556596469717,0.0003719668910080465,'1','','http://blog.ityousee.com/1.png',0),('1556596494920','记一次docker-ce重装后无法启动','','因为要使用新版本的docker-ce,故按照docker文档安装了最新版本的docker(为了使用nvidia-docker)，但是安装完之后怎么也启动不了docker服务，但是可以查看docker版本，最后直接使用dockerd命令启动，显示的是我机器上的 /etc/docker/daemon.json 文件有问题(可能是什么时候改坏了)，从其他机器上拷贝一个文件，重启docker就可以了。','docker','1556594816141','因为要使用新版本的docker-ce,故按照docker文档安装了最新版本的docker(为了使用nvidia-docker)，但是安装完之后怎么也启动不了docker服务，但是可以查看docker版本，最后直接使用**dockerd**命令启动，显示的是我机器上的 /etc/docker/daemon.json 文件有问题(可能是什么时候改坏了)，从其他机器上拷贝一个文件，重启docker就可以了。\r\n\r\n','/articles/2019/04/30/1556596494920.html','0',1556596494972,1556596494972,0.9993218468899102,'1','','https://img.hacpai.com/bing/20180708.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596523393','ubuntu安装最新版本docker-ce','','卸载已有的docker版本  apt-get remove docker docker-engine docker.io docker-ce   添加使用HTTPS 传输的软件包以及 CA 证书  apt-get update apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common   添加软件源的 GPG 密钥(使用的是国内的源)  curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -   向 source.list 中添加 Docker 软件源  add-apt-repository \\ \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\ $(lsb_release -cs) \\ stable\"   更新 apt 软件包缓存，并安装 docker-c....','docker','1556594816141','1. 卸载已有的docker版本\r\n```\r\napt-get remove docker docker-engine docker.io docker-ce\r\n```\r\n2. 添加使用HTTPS 传输的软件包以及 CA 证书\r\n```\r\napt-get update\r\napt-get install \\\r\n    apt-transport-https \\\r\n    ca-certificates \\\r\n    curl \\\r\n    software-properties-common\r\n```\r\n3. 添加软件源的 GPG 密钥(使用的是国内的源)\r\n```\r\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\r\n```\r\n4. 向 source.list 中添加 Docker 软件源\r\n```\r\nadd-apt-repository \\\r\n\"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\\r\n$(lsb_release -cs) \\\r\nstable\"\r\n```\r\n5. 更新 apt 软件包缓存，并安装 docker-ce(这样安装的是最新版本的)\r\n```\r\n apt-get update\r\n apt-get install docker-ce\r\n```\r\n6. 如果要安装指定的版本，如：apt-get install docker-ce=5:18.09.1~3-0~ubuntu-xenial\r\n```\r\napt-cache madison docker-ce\r\napt-get install docker-ce=<VERSION_STRING>\r\n```\r\n\r\n使用官方的镜像原安装请参考docker官方文档\r\nhttps://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-repository\r\n','/articles/2019/04/30/1556596523393.html','0',1556596523496,1556596542111,0.9996274632428062,'1','','https://img.hacpai.com/bing/20180405.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596563930','ubuntu更换为阿里云的软件源','','备份/etc/apt/sources.list  mv /etc/apt/sources.list /etc/apt/sources.list.bak   添加阿里云软件源到/etc/apt/sources.list  gedit /etc/apt/sources.list或者vi /etc/apt/sources.list deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse univers....','linux','1556594816141','1. 备份/etc/apt/sources.list\r\n```\r\nmv /etc/apt/sources.list /etc/apt/sources.list.bak \r\n```\r\n2. 添加阿里云软件源到/etc/apt/sources.list\r\n```\r\ngedit /etc/apt/sources.list或者vi /etc/apt/sources.list\r\n\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial universe\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties\r\ndeb http://archive.canonical.com/ubuntu xenial partner\r\ndeb-src http://archive.canonical.com/ubuntu xenial partner\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted\r\ndeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security universe\r\ndeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse\r\n```\r\n3. 更新\r\n```\r\napt-get update\r\n```','/articles/2019/04/30/1556596563930.html','0',1556596563982,1556596563982,0.9997678841363663,'1','','https://img.hacpai.com/bing/20180222.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596596631','ssh免密登录','','在a主机上输入（按回车再按回车）：   ssh-keygen -t rsa -P \'设置密码\'   在a机器上输入如下（把公钥拷贝到b服务器上，按回车后会让输入b服务器的密码）：  scp /root/.ssh/id_rsa.pub root@172.30.20.201:/root/.ssh/authorized_keys   以后a服务器连接b服务器就不用再输密码了  ssh 172.30.20.201','linux','1556594816141','1. 在a主机上输入（按回车再按回车）：\r\n```\r\n ssh-keygen -t rsa -P \'设置密码\'\r\n```\r\n2. 在a机器上输入如下（把公钥拷贝到b服务器上，按回车后会让输入b服务器的密码）：\r\n```\r\nscp /root/.ssh/id_rsa.pub root@172.30.20.201:/root/.ssh/authorized_keys\r\n```\r\n3. 以后a服务器连接b服务器就不用再输密码了\r\n```\r\nssh 172.30.20.201\r\n```','/articles/2019/04/30/1556596596631.html','0',1556596596683,1556596596683,0.999617519182169,'1','','https://img.hacpai.com/bing/20171108.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596619723','maven使用阿里云中央仓库','','在maven的安装目录下修改conf/setting.xml文件 &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; 　　&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;','maven','1556594816141','在maven的安装目录下修改conf/setting.xml文件\r\n```\r\n<mirrors>\r\n    <mirror>\r\n      <id>alimaven</id>\r\n      <name>aliyun maven</name>\r\n  　　<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\r\n      <mirrorOf>central</mirrorOf>        \r\n    </mirror>\r\n</mirrors>\r\n```','/articles/2019/04/30/1556596619723.html','0',1556596619828,1556596619828,0.9996776981417188,'1','','https://img.hacpai.com/bing/20180704.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596641898','IDEA项目左边栏只能看到文件看不到项目结构','','https://blog.csdn.net/weixin_42362985/article/details/80538064','待分类','1556594816141','https://blog.csdn.net/weixin_42362985/article/details/80538064','/articles/2019/04/30/1556596641898.html','0',1556596642000,1556596642000,0.9995878063715927,'1','','https://img.hacpai.com/bing/20180205.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596671249','vue中清除定时器','','https://blog.csdn.net/qq_21132509/article/details/83504522 方式一： beforeDestroy() { clearInterval(this.timer); this.timer = null; }  方式二： const timer = setInterval(() =&gt;{ // 某些定时器操作 }, 500); // 通过$once来监听定时器，在beforeDestroy钩子可以被清除。 this.$once(\'hook:beforeDestroy\', () =&gt; { clearInterval(timer); })','vue','1556594816141','https://blog.csdn.net/qq_21132509/article/details/83504522\r\n方式一：\r\n\r\n```\r\nbeforeDestroy() {\r\n    clearInterval(this.timer);        \r\n    this.timer = null;\r\n}\r\n```\r\n方式二：\r\n```\r\nconst timer = setInterval(() =>{                    \r\n    // 某些定时器操作                \r\n}, 500);            \r\n// 通过$once来监听定时器，在beforeDestroy钩子可以被清除。\r\nthis.$once(\'hook:beforeDestroy\', () => {            \r\n    clearInterval(timer);                                    \r\n})\r\n```','/articles/2019/04/30/1556596671249.html','0',1556596671301,1556596677929,0.999965883214545,'1','','https://img.hacpai.com/bing/20180223.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596698613','ubuntu安装搜狗输入法','','https://blog.csdn.net/areigninhell/article/details/79696751','待分类','1556594816141','https://blog.csdn.net/areigninhell/article/details/79696751','/articles/2019/04/30/1556596698613.html','0',1556596698665,1556596698665,0.9999139478757403,'1','','https://img.hacpai.com/bing/20180124.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596733155','ubuntu禁止内核更新（更新内核后显卡驱动也要重新安装，很烦人）','','https://www.cnblogs.com/medsci/p/8338170.html 查看内核列表 dpkg --get-selections |grep linux-image 查看正在使用的内核 uname -a 移除旧的内核 sudo apt-get remove linux-image-4.10.0-28-generic sudo apt-get remove linux-image-extra-4.10.0-28-generic 禁止更新内核 sudo apt-mark hold linux-image-4.13.0-31-generic','linux','1556594816141','https://www.cnblogs.com/medsci/p/8338170.html\r\n\r\n```\r\n查看内核列表\r\ndpkg --get-selections |grep linux-image\r\n查看正在使用的内核\r\nuname -a\r\n移除旧的内核\r\nsudo apt-get remove linux-image-4.10.0-28-generic\r\nsudo apt-get remove linux-image-extra-4.10.0-28-generic \r\n禁止更新内核\r\nsudo apt-mark hold linux-image-4.13.0-31-generic\r\n```','/articles/2019/04/30/1556596733155.html','0',1556596733207,1556596733207,0.9997483861140536,'1','','https://img.hacpai.com/bing/20181108.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596764806','cudnn7.1 安装cuDNN 7.1','','https://blog.csdn.net/DarrenXf/article/details/82182449 $ tar -zxvf cudnn-9.2-linux-x64-v7.1.tgz $ sudo cp cuda/include/cudnn.h /usr/local/cuda/include/ $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -d $ sudo chmod a+r /usr/local/cuda/include/cudnn.h $ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*','linux','1556594816141','https://blog.csdn.net/DarrenXf/article/details/82182449\r\n\r\n```\r\n$ tar -zxvf cudnn-9.2-linux-x64-v7.1.tgz\r\n$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include/\r\n$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -d \r\n$ sudo chmod a+r /usr/local/cuda/include/cudnn.h\r\n$ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*\r\n```','/articles/2019/04/30/1556596764806.html','0',1556596764858,1556596764858,0.999138127590189,'1','','https://img.hacpai.com/bing/20190124.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596791813','cuda ImportError: libcudart.so.7.0: cannot open shared object file: No such file or directory','','https://www.jianshu.com/p/4a9d7c0d44ad sudo ldconfig /usr/local/cuda/lib64','linux','1556594816141','https://www.jianshu.com/p/4a9d7c0d44ad\r\n```\r\nsudo ldconfig /usr/local/cuda/lib64\r\n```','/articles/2019/04/30/1556596791813.html','0',1556596791865,1556596791865,0.9996753268861901,'1','','https://img.hacpai.com/bing/20180404.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596811470','vue中setInterval 使用','','vue 是单页面应用，路由切换后，定时器并不会自动关闭，需要手动清除，当页面被销毁时，清除定时器即可 mounted() { let vm = this vm.interval = setInterval(function () { vm.indexCard(); }, 3000); }, destroyed(){ clearInterval(this.interval) },','vue','1556594816141','vue 是单页面应用，路由切换后，定时器并不会自动关闭，需要手动清除，当页面被销毁时，清除定时器即可\r\n```\r\nmounted() {\r\n      let vm = this\r\n      vm.interval = setInterval(function () {\r\n        vm.indexCard();\r\n      }, 3000);\r\n    },\r\n    destroyed(){\r\n      clearInterval(this.interval)\r\n    },\r\n```','/articles/2019/04/30/1556596811470.html','0',1556596811522,1556596811522,0.9997958818517038,'1','','https://img.hacpai.com/bing/20181206.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596835045','java中求百分比','','第一种方式： NumberFormat nf = NumberFormat.getPercentInstance(); nf.setMinimumFractionDigits(2);//控制保留小数点后几位，2：表示保留2位小数点 String percent = nf.format(浮点数如：0.2398);  第二种方式： DecimalFormat df1 = new DecimalFormat(\"0.00%\"); //##.00% 百分比格式，后面不足2位的用0补齐 String result= df1.format(浮点数);','java','1556594816141','第一种方式：\r\n```\r\nNumberFormat nf = NumberFormat.getPercentInstance();\r\nnf.setMinimumFractionDigits(2);//控制保留小数点后几位，2：表示保留2位小数点\r\nString percent = nf.format(浮点数如：0.2398);\r\n```\r\n第二种方式：\r\n```\r\nDecimalFormat df1 = new DecimalFormat(\"0.00%\");    //##.00%   百分比格式，后面不足2位的用0补齐  \r\nString result= df1.format(浮点数);  \r\n```','/articles/2019/04/30/1556596835045.html','0',1556596835148,1556596835148,0.9997031706102494,'1','','https://img.hacpai.com/bing/20190120.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596861593','ubuntu安装nvidia驱动','','https://blog.csdn.net/ghw15221836342/article/details/79571559','linux,nvidia','1556594816141','https://blog.csdn.net/ghw15221836342/article/details/79571559','/articles/2019/04/30/1556596861593.html','0',1556596861696,1556596861696,0.999923469785242,'1','','https://img.hacpai.com/bing/20180407.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596885650','ubuntu开启root用户','','https://blog.csdn.net/sunxiaoju/article/details/51993091','linux','1556594816141','https://blog.csdn.net/sunxiaoju/article/details/51993091','/articles/2019/04/30/1556596885650.html','0',1556596885754,1556596894914,0.8234697787558928,'1','','https://img.hacpai.com/bing/20180328.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596921731','fastjson格式化java对象为json字符串','','String data = JSON.toJSONString(java对象, SerializerFeature.DisableCircularReferenceDetect,SerializerFeature.WriteDateUseDateFormat);','java','1556594816141','```\r\nString data = JSON.toJSONString(java对象, SerializerFeature.DisableCircularReferenceDetect,SerializerFeature.WriteDateUseDateFormat);\r\n```','/articles/2019/04/30/1556596921731.html','0',1556596921783,1556596921783,0.9995616177178112,'1','','https://img.hacpai.com/bing/20190124.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596944902','vue中使用vue2-highcharts遇到的一些问题','','如果坐标轴是时间轴,那么series的格式应为: series: [ {name: \'名称\', data: [], } ],  data的格式为(x对应横坐标的值,y对应纵坐标的值): [[x,y],[x,y],[x,y]......]  横坐标如果是时间的话,那么x的取值类型是Number的,也就是说要获取时间戳,获取时间戳的代码如下: var someDate = new Date(\"日期字符串,格式为:yyyy-mm-dd HH:mm:ss\") var x = Date.UTC(someDate.getFullYear(), someDate.getMonth(), someDate.getDate(), someDate.getHours(), someDate.getMinutes(), someDate.getSeconds());  从后台取的数据日期格式要重写格式化成UTC的,并添加到相应的series的data中,代码如下(data.data是后台返回的数组,,数组格式也是[[x,y],[x,y],[x,y]……]这个格式): vm.$refs.lineCharts.....','vue','1556594816141','如果坐标轴是时间轴,那么series的格式应为:\r\n```\r\nseries: [\r\n            {name: \'名称\',\r\n              data: [], \r\n            }\r\n          ],\r\n```\r\ndata的格式为(x对应横坐标的值,y对应纵坐标的值):\r\n```\r\n[[x,y],[x,y],[x,y]......]\r\n```\r\n横坐标如果是时间的话,那么x的取值类型是Number的,也就是说要获取时间戳,获取时间戳的代码如下:\r\n```\r\nvar someDate = new Date(\"日期字符串,格式为:yyyy-mm-dd HH:mm:ss\")\r\n        var x = Date.UTC(someDate.getFullYear(), someDate.getMonth(), someDate.getDate(), someDate.getHours(), someDate.getMinutes(), someDate.getSeconds());\r\n```\r\n\r\n从后台取的数据日期格式要重写格式化成UTC的,并添加到相应的series的data中,代码如下(data.data是后台返回的数组,,数组格式也是[[x,y],[x,y],[x,y]......]这个格式):\r\n```\r\nvm.$refs.lineCharts.getChart().series[0].setData(data.data.map(v => {\r\n            var someDate =new Date(v[0])\r\n            var tms = Date.UTC(someDate.getFullYear(), someDate.getMonth(), someDate.getDate(), someDate.getHours(),someDate.getMinutes(),someDate.getSeconds());\r\n            return[tms,v[1]]\r\n          }))\r\n```\r\n\r\n因为我的折线图是动态加载的,使用的websocket,当后台有数据的时候就传到前台,折线图重新绘制一个点(如果第三个参数为false则新加一个点时不会挤掉最开始的那个点,这样做的意义是初始的数据以及后来动态加载的数据都会显示在折线图上,而不会每次增加一个点最开始的点就被删除):\r\n```\r\nthis.$refs.lineCharts.getChart().series[0].addPoint([x, y], true, false);\r\n```','/articles/2019/04/30/1556596944902.html','0',1556596944954,1556596944954,0.9996906747895065,'1','','https://img.hacpai.com/bing/20190105.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556596968993','java中重写toString方法为json格式','','https://www.cnblogs.com/zipon/p/6208346.html','java','1556594816141','https://www.cnblogs.com/zipon/p/6208346.html','/articles/2019/04/30/1556596968993.html','0',1556596969045,1556596969045,0.9998416051788029,'1','','https://img.hacpai.com/bing/20180723.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597006626','docker常用命令','','创建并运行一个容器 -d表示后台运行 –network=host表示容器内部的所有端口映射为宿主机的端口 -v表示挂载到宿主机的位置 docker run -d --network=host -v /data/mysql:/var/lib/mysql -v /data:/data --name=jserver --restart=always 容器名     把一个容器提交为一个镜像 冒号后面为标签 docker commit -m \'XXX\' -a \'XXX\' 镜像id 名称:20181119     把一个镜像导出到文件 docker sava 镜像id &gt; 文件名.tar','docker','1556594816141','* 1. 创建并运行一个容器\r\n	-d表示后台运行 --network=host表示容器内部的所有端口映射为宿主机的端口  -v表示挂载到宿主机的位置\r\n	`docker run -d --network=host -v /data/mysql:/var/lib/mysql -v /data:/data  --name=jserver --restart=always 容器名`\r\n	\r\n* 2. 把一个容器提交为一个镜像\r\n	冒号后面为标签 \r\n	`docker commit -m \'XXX\' -a \'XXX\' 镜像id  名称:20181119`\r\n	\r\n* 3. 把一个镜像导出到文件\r\n	docker sava 镜像id > 文件名.tar','/articles/2019/04/30/1556597006626.html','1',1556597006678,1556597006678,0.9999542539952209,'1','','https://img.hacpai.com/bing/20180817.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597029688','mysql常用命令','','持续更新中… 1. 查看MySql数据库物理文件存放位置 show global variables like “%datadir%”;','mysql','1556594816141','持续更新中...\r\n1. 查看MySql数据库物理文件存放位置\r\n	show global variables like \"%datadir%\";','/articles/2019/04/30/1556597029688.html','1',1556597029790,1556597029790,0.0003194437903738523,'1','','https://img.hacpai.com/bing/20180817.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597075731','Linux常用指令','\n','更新中...   解压缩 将文件压缩为tgz格式: tar -zcvf 目标文件名.tgz 源文件    shell脚本创建定时任务, 首先安装apt install crontab,$1表示执行脚本时的第一个参数,sed命令中如果要使用变量,需要用三个单引号包起来. 首先删除指定的行,然后用sed命令追加一行到文件末 #!/bin/bash sed -i \'14d\' /etc/crontab sed -i \'$a */\'\'\'$1\'\'\' * * * * root ntpdate \'\'\'$2\'\'\'\' /etc/crontab  -------------------------2019年1月15更新----------------------------------- 3.scp将文件/文件夹从本地拷至远程服务器 scp -r test.txt username@remote_ip:/opt/   scp将文件/文件夹从远程服务器拷至本地 scp -r username@remote_ip:/opt/test.txt /opt/    -------------------------2....','linux','1556594816141','![](https://img.hacpai.com/bing/20180815.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n更新中...\n\n1. 解压缩\n   将文件压缩为tgz格式:\n   \n   ```\n   tar -zcvf  目标文件名.tgz 源文件\n   ```\n2. shell脚本创建定时任务,\n   首先安装apt install crontab,$1表示执行脚本时的第一个参数,sed命令中如果要使用变量,需要用三个单引号包起来.\n   首先删除指定的行,然后用sed命令追加一行到文件末\n   \n   ```\n   #!/bin/bash\n   sed -i \'14d\' /etc/crontab\n   sed -i \'$a */\'\'\'$1\'\'\' *    * * *   root   ntpdate \'\'\'$2\'\'\'\' /etc/crontab\n   ```\n   \n   -------------------------2019年1月15更新-----------------------------------\n   3.scp将文件/文件夹从本地拷至远程服务器\n   scp -r test.txt username@remote_ip:/opt/\n3. scp将文件/文件夹从远程服务器拷至本地\n   scp -r username@remote_ip:/opt/test.txt /opt/\n\n---\n\n-------------------------2019年5月7更新-----------------------------------\n5.top命令(每列的含义)\n\n```\n**PID: 进程描述符   \n	**USER： 进程的拥有者   \n	**PRI： 进程的优先级   \n	**NI：   nice level   \n	**SIZE: 进程拥有的内存（包括code segment + data segment + stack segment）   \n	**RSS:  物理内存使用  \n	**VIRT：（virtul memory usage）: 进程需要的虚拟内存大小  \n	**RES：(resident memory usage)： 常驻内存   \n	**SHARE: 和其他进程共享的物理内存空间   \n	**STAT：进程的状态，有 S=sleeping，R=running，T=stopped or traced，D=interruptible sleep（**不可中断的睡眠状态**），Z=zombie。   \n	**%CPU： CPU使用率   \n	**%MEM： 物理内存的使用  \n	**TIME： 进程占用的总共cpu时间   \n	**COMMAND：进程的命令\n	top -p pid,pid2,pid3 只显示指定进程的信息\n	top -u username显示某个用户的进程信息\n	top -d ntime 设置刷屏的时间(单位为s)\n	top -H 显示线程的信息，而不是进程的信息\n	top \'-b\' 加上\'-b\'后，top显示的时候，将每一次显示的结果都打印出来，不会将上一次的结果给冲掉\n```\n\n6.time命令\ntime命令加在其他命令前面可以显示命令执行的时间\n7. rz sz\n\n``````````````````````````````````````````````````````````````````````````````````````\nsz filename   sz命令发送文件到本地\nrz rz命令本地上传文件到服务器\n``````````````````````````````````````````````````````````````````````````````````````\n\n8.查看某个进程运行的时间\n\n`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\nps -eo pid,tty,user,comm,lstart,etime | grep java\n pid: 进程ID\n user：用户\n tty: 终端\n comm：进程名\n lstart：开始时间\n etime：运行时间\n`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\n\n9. 搜索当前目录下文件中的字符串\n\n```\n例: 搜索当前目录下包含message字符串的文件,并显示行号\ngrep -rn \"message\" *\n\n参数:\n-r 是递归查找\n-n 是显示行号\n-R 查找所有文件包含子目录\n-i 忽略大小写\n```\n\n10. 查找文件\n\n```\n1. 根据 文件或目录名称 搜索\n	find 【搜索目录】【-name或者-iname】【搜索字符】：-name和-iname的区别一个区分大小写，一个不区分大小写\n2. 根据 文件大小 搜索\n	例: 查找根目录大于100M的文件\n	find / -size +204800\n	1 数据块 == 512 字节 0.5KB，也就是1KB等于2数据块100MB = 102400KB =204800数据块\n3. 根据 所有者和所属组 搜索\n	①、在home目录下查询所属组为 root 的文件\n	　　　　find /home -group root\n	②、在home目录下查询所有者为 root 的文件\n	　　　　find /home -user root\n4. 根据 时间属性 搜索\n	find 【路径】【选项】【时间】\n	选项有下面三种：-amin 访问时间\n	　　　　　　　　 -cmin 文件属性被更改\n	　　　　　　　　 -mmin 文件内容被修改\n	时间：+n,-n,n分别表示超过n分钟，n分钟以内和n分钟\n5. 根据 文件类型或i节点 搜索\n	-type 根据文件类型查找：\n	　f表示文件，d表示目录，l表示软链接\n	例：查找 /home 目录下文件类型是目录的\n	find /home -type d\n	　　-inum 根据i节点查找\n	例：查找 /tmp 目录下i节点为400342的文件或目录\n	　 find /tmp -inum 400342\n6. 组合条件 搜索　\n　　这里有两个参数：\n	　　①、-a 表示两个条件同时满足（and）\n	　　②、-o 表示两个条件满足任意一个即可（or）\n	　　例：查找/etc目录下大于80MB同时小于100MB的文件\n	　　find /etc -size +163840 -a -size -204800\n```\n\n11. shell脚本中的$*，$@和$#\n\n```\n脚本名\n称叫test.sh 入参三个: 1 2 3\n	运行test.sh 1 2 3后\n	$*为\"1 2 3\"（一起被引号包住）\n	$@为\"1\" \"2\" \"3\"（分别被包住）\n	$#为3（参数数量)\n	$? 表示命令执行后返回的状态 （执行成功 返回0 执行不成功 返回非0\n	$$ 表示当前进程的进程号 希望打开一个进程后不再打开另一个（/proc/<PID>）\n	$! 表示后台运行的最后一个进程号\n	$0 表示当前的进程名\n```\n\n12. Linux检查是否安装了某个软件\n    \n    ```\n    rpm -qa | grep \"软件或者包的名字\" centos\n    dpkg -l|grep package-name     ubuntu\n    ```\n13. 监控某个进程是被谁kill掉了\n    \n    ```\n    auditctl -D //清空规则\n    auditctl -a exit,always -S kill -F a0=0x6e9  -F参数表示额外匹配，这里选择匹配系统调用的第一个参数，参数内容是要监控进程的PID（这里要用16进制）。\n    auditctl -l //查看规则\n    less /var/log/audit/audit.log 手动kill掉某个进程后,查看这个日志,如下:\n    type=SYSCALL msg=audit(1591080384.025:1755): arch=c000003e syscall=62 success=no exit=-3 a0=26ad2 a1=0 a2=a a3=26ad2 items=0 ppid=1 pid=159082 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts0 ses=2 comm=\"java\" exe=\"/usr/java/jdk1.8.0_152/bin/java\" key=(null)\n    type=OBJ_PID msg=audit(1591080182.780:1747): opid=158418 oauid=0 ouid=0 oses=2 ocomm=\"java\"\n    pid=159082 表示这个进程发的kill信号；ppid=1表示这个进程的父进程；\n    OBJ_PID的opid=158418 表示这个进程被kill了。\n    ```\n14. centos查看网卡UUID\n    \n    ```\n    nmcli con show\n    ```\n15. 查看某个端口的连接数\n    \n    ```\n    netstat -na | grep ESTAB | grep 3306 | wc -l\n    ```\n16. 查看不同状态的连接数\n    \n    ```\n    netstat -an|awk \'/tcp/ {print $6}\'|sort|uniq -c\n    ```\n\n','/articles/2019/04/30/1556597075731.html','1',1556597075783,1599721212025,0.9999233939561979,'1','','https://img.hacpai.com/bing/20180815.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1556597099988','vue中使用el-date-picker 设置默认值','','date-picker获取的时间传到后台不能被正常解析,所以使用 format=“yyyy-MM-dd HH:mm:ss” value-format=“yyyy-MM-dd HH:mm:ss” 以及getSTime这个方法把日期给格式化,后台就能正常接收了 &lt;el-date-picker v-model=\"query.begainTime\" type=\"datetime\" format=\"yyyy-MM-dd HH:mm:ss\" value-format=\"yyyy-MM-dd HH:mm:ss\" placeholder=\"选择起始日期\" align=\"left\" @change=\"getSTime\" :picker-options=\"pickerOptions\"&gt; &lt;/el-date-picker&gt;  在data中添加如下对象: pickerOptions: { shortcuts: [{ text: \'一周前\', onClick(picker) { const date = new Date(); date.setTime(date.getTime() - ....','vue','1556594816141','date-picker获取的时间传到后台不能被正常解析,所以使用\r\nformat=\"yyyy-MM-dd HH:mm:ss\"\r\nvalue-format=\"yyyy-MM-dd HH:mm:ss\"\r\n以及getSTime这个方法把日期给格式化,后台就能正常接收了\r\n```\r\n<el-date-picker\r\n          v-model=\"query.begainTime\"\r\n          type=\"datetime\"\r\n          format=\"yyyy-MM-dd HH:mm:ss\"\r\n          value-format=\"yyyy-MM-dd HH:mm:ss\"\r\n          placeholder=\"选择起始日期\"\r\n          align=\"left\"\r\n          @change=\"getSTime\"\r\n          :picker-options=\"pickerOptions\">\r\n        </el-date-picker>\r\n```\r\n在data中添加如下对象:\r\n```\r\npickerOptions: {\r\n          shortcuts: [{\r\n            text: \'一周前\',\r\n            onClick(picker) {\r\n              const date = new Date();\r\n              date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\r\n              picker.$emit(\'pick\', date);\r\n            }\r\n          }, {\r\n            text: \'昨天\',\r\n            onClick(picker) {\r\n              const date = new Date();\r\n              date.setTime(date.getTime() - 3600 * 1000 * 24);\r\n              picker.$emit(\'pick\', date);\r\n            }\r\n          }, {\r\n            text: \'今天零点\',\r\n            onClick(picker) {\r\n				//获取当天零点\r\n              const date = new Date(new Date(new Date().toLocaleDateString()).getTime());\r\n			  //获取当天晚上24点\r\n			  //const start = new Date(new Date(new Date().toLocaleDateString()).getTime()+24*60*60*1000-1);\r\n              picker.$emit(\'pick\',date);\r\n            }\r\n          },{\r\n            text: \'一小时前\',\r\n            onClick(picker) {\r\n              const date = new Date();\r\n              date.setTime(date.getTime() - 3600 * 1000 * 1);\r\n              picker.$emit(\'pick\', date);\r\n            }\r\n          },{\r\n            text: \'当前时间\',\r\n            onClick(picker) {\r\n              picker.$emit(\'pick\', new Date());\r\n            }\r\n          }]\r\n        },\r\n```\r\n加入如下的方法:\r\n```\r\n getSTime(val) {\r\n        this.query.begainTime=val;//这个sTime是在data中声明的，也就是v-model绑定的值\r\n      },\r\n```\r\n效果如下\r\n![](http://pdlmj6kjo.bkt.clouddn.com/20181114180740.png)','/articles/2019/04/30/1556597099988.html','0',1556597100040,1556597100040,0.9998250306147751,'1','','http://pdlmj6kjo.bkt.clouddn.com/20181114180740.png',0),('1556597259818','java中使用BASE64编码图片 然后再解码保存','','String str = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\TrafficFlowTest.jpg\"))); Files.write(Paths.get(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\b.jpg\"), Base64.getDecoder().decode(str), StandardOpenOption.CREATE);','java','1556594816141','```\r\n String str = Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\TrafficFlowTest.jpg\")));\r\n  Files.write(Paths.get(\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\b.jpg\"), Base64.getDecoder().decode(str), StandardOpenOption.CREATE);\r\n\r\n```','/articles/2019/04/30/1556597259818.html','0',1556597259871,1556597259871,0.9993266934803359,'1','','https://img.hacpai.com/bing/20190217.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597289595','使用docker官方的mysql镜像','','https://blog.csdn.net/nzyalj/article/details/79177291','docker','1556594816141','https://blog.csdn.net/nzyalj/article/details/79177291','/articles/2019/04/30/1556597289595.html','0',1556597289647,1556597289647,0.00011085394124688008,'1','','https://img.hacpai.com/bing/20190424.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597317330','docker基础容器中安装java','','下载对应系统的java版本到宿主机 http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 进入容器 docker exec -it &lt;容器名称或者ID&gt; bash 将java压缩包从宿主机拷贝到容器指定目录 docker cp java路径 容器名称:容器中的路径 解压 tar -zxvf jdk-8u121-linux-x64.tar.gz 创建java目录 mkdir /usr/lib/java 将解压后的java剪切到该目录 cp 源文件路径 目标文件路径 设置环境变量 vim ~/.bashrc  export JAVA_HOME=/usr/lib/java/jdk1.8.0_121 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH   刷新环境变量 source ~....','docker','1556594816141','1. 下载对应系统的java版本到宿主机\r\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\r\n2. 进入容器\r\ndocker exec -it <容器名称或者ID> bash\r\n3. 将java压缩包从宿主机拷贝到容器指定目录\r\ndocker cp java路径 容器名称:容器中的路径\r\n4. 解压\r\ntar -zxvf  jdk-8u121-linux-x64.tar.gz\r\n5. 创建java目录\r\nmkdir /usr/lib/java\r\n6. 将解压后的java剪切到该目录\r\ncp 源文件路径  目标文件路径\r\n7. 设置环境变量 vim ~/.bashrc\r\n```\r\nexport JAVA_HOME=/usr/lib/java/jdk1.8.0_121\r\nexport JRE_HOME=${JAVA_HOME}/jre  \r\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \r\nexport PATH=${JAVA_HOME}/bin:$PATH \r\n```\r\n8. 刷新环境变量\r\nsource ~/.bashrc\r\n9. 验证\r\njava -version','/articles/2019/04/30/1556597317330.html','0',1556597317382,1556597317382,0.999639359497702,'1','','https://img.hacpai.com/bing/20181211.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597350358','maven引入本地jar包','','1.先将jar包安装到本地仓库 mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar 2. 在pom文件中添加依赖就可以了,跟安装到本地仓库的版本要一致.','maven','1556594816141','1.先将jar包安装到本地仓库\r\nmvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar \r\n2. 在pom文件中添加依赖就可以了,跟安装到本地仓库的版本要一致.','/articles/2019/04/30/1556597350358.html','0',1556597350409,1556597350409,0.00014572890677344574,'1','','https://img.hacpai.com/bing/20190108.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597375826','定时将ubuntu上的mysql数据库备份到github','','https://icharle.com/Linuxbak.html','linux','1556594816141','https://icharle.com/Linuxbak.html','/articles/2019/04/30/1556597375826.html','0',1556597375878,1556597375878,0.9999363217642055,'1','','https://img.hacpai.com/bing/20181222.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597397837',' Java泛型中<？ extends E>和<？ super E>的区别','','https://blog.csdn.net/asdfsadfasdfsa/article/details/52794573?utm_source=blogxgwz4','java','1556594816141','https://blog.csdn.net/asdfsadfasdfsa/article/details/52794573?utm_source=blogxgwz4','/articles/2019/04/30/1556597397837.html','0',1556597397889,1556597397889,0.9999238003672514,'1','','https://img.hacpai.com/bing/20180630.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597424214','springboot集成swagger','','引入依赖  &lt;springfox-swagger2.version&gt;2.2.2&lt;/springfox-swagger2.version&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;${springfox-swagger2.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;${springfox-swagger2.version}&lt;/version&gt; &lt;/dependency&gt;   添加配置类   @Config....','java','1556594816141','1. 引入依赖\r\n```\r\n<springfox-swagger2.version>2.2.2</springfox-swagger2.version>\r\n<dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-swagger2</artifactId>\r\n            <version>${springfox-swagger2.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-swagger-ui</artifactId>\r\n            <version>${springfox-swagger2.version}</version>\r\n        </dependency>\r\n```\r\n2. 添加配置类\r\n```\r\n		@Configuration\r\n		@EnableSwagger2\r\n		public class SwaggerConfig {\r\n			/**\r\n			 * 可以注入多个doket，也就是多个版本的api，可以在看到有三个版本groupName不能是重复的，v1和v2是ant风格匹配，配置文件\r\n		 * api查看地址:http://localhost:8080/swagger-ui.html\r\n		 * @return\r\n		 */\r\n		@Bean\r\n		public Docket api() {\r\n			//可以添加多个header或参数\r\n			ParameterBuilder aParameterBuilder = new ParameterBuilder();\r\n			aParameterBuilder\r\n					.parameterType(\"header\")\r\n					.name(\"Authorization\")\r\n					.description(\"header中Authorization字段用于认证\")\r\n					.modelRef(new ModelRef(\"string\"))\r\n					//非必需，这里是全局配置，然而在登陆的时候是不用验证的\r\n					.required(false).build();\r\n			List<Parameter> aParameters = new ArrayList<Parameter>();\r\n			aParameters.add(aParameterBuilder.build());\r\n						return new Docket(DocumentationType.SWAGGER_2).groupName(\"v1\").select().apis(RequestHandlerSelectors.basePackage(\"com.weishilvjian.freapi.controller\"))\r\n							.paths(PathSelectors.any()).build().apiInfo(apiInfo1()).globalOperationParameters(aParameters);\r\n			//                ;\r\n				}\r\n\r\n			private ApiInfo apiInfo1() {\r\n				return new ApiInfoBuilder()\r\n						.title(\"sihuatech  api\")\r\n						.contact(\"wjh\")\r\n						.version(\"v0.01\")\r\n						.build();\r\n			}\r\n\r\n		}\r\n```\r\n\r\n3. 使用\r\n	在controller类上添加注解:`@Api(value = \"用来提供FRE,FCE以及OCR等接口\")`\r\n	在方法上添加注解(我的参数格式是@RequestBody JSONObject param这样的,其它格式的请参照网上教程):\r\n	`@ApiOperation(value=\"FCE接口\", notes=\"json格式参数\",produces = \"application/json\")\r\n    @ApiImplicitParams({\r\n            @ApiImplicitParam(name=\"param\",value= \"{\\\"mobile\\\":\\\"17765071662\\\",\\\"passWord\\\":\\\"123456\\\"}\",dataType=\"string\", paramType = \"body\")})`\r\n4. 效果如下图:\r\n![](http://pdlmj6kjo.bkt.clouddn.com/2018-10-12_131907.png)','/articles/2019/04/30/1556597424214.html','0',1556597424266,1556597424266,0.9989807590790621,'1','','http://pdlmj6kjo.bkt.clouddn.com/2018-10-12_131907.png',0),('1556597448957','ubuntu 同步 ntp','','安装ntp客户端apt-get install ntpdate ntpdate ip地址','linux','1556594816141','1. 安装ntp客户端`apt-get install ntpdate`\r\n2. ntpdate ip地址','/articles/2019/04/30/1556597448957.html','0',1556597449009,1556597449009,0.9992830950027397,'1','','https://img.hacpai.com/bing/20171115.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597471911','vue2.0+Element UI的表格table把数字格式化为其他内容','','在el-table-column标签中加入 :formatter=“formate” 在methods中添加方法 formate 方法如下  formate(val) { if(val==0){return \"是\"} else{return \"否\"} }','vue','1556594816141','1. 在el-table-column标签中加入 :formatter=\"formate\"\r\n2. 在methods中添加方法 formate\r\n3. 方法如下\r\n```\r\nformate(val)\r\n{\r\n	if(val==0){return \"是\"}\r\n	else{return \"否\"}\r\n}\r\n```','/articles/2019/04/30/1556597471911.html','0',1556597471963,1556597471963,0.9998249129184988,'1','','https://img.hacpai.com/bing/20180109.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597495591','解决video.js播放rtmp视频时只在左上角显示一小块播放区域','','删除掉node_modules中的videojs-flash npm install –save videojs-flash@2.1.2','video.js','1556594816141','1. 删除掉node_modules中的videojs-flash\r\n2. npm install --save videojs-flash@2.1.2','/articles/2019/04/30/1556597495591.html','0',1556597495694,1556597495694,0.9995767231303451,'1','','https://img.hacpai.com/bing/20181130.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597518556','vue+element关闭dialog后清空数据','','在dialog上加上 @close=“clearData” 在methods中添加方法clearData 在clearData中写入如下内容:  this.$refs.dataForm.resetFields()  其中dataForm为el-form标签上的ref属性的值,这样在关闭dialog后就会清空表单里的数据,再次打开dialog就不会有上次编辑留下的内容','vue','1556594816141','1. 在dialog上加上 @close=\"clearData\"\r\n2. 在methods中添加方法clearData\r\n3. 在clearData中写入如下内容:\r\n```\r\nthis.$refs.dataForm.resetFields()\r\n```\r\n其中dataForm为el-form标签上的ref属性的值,这样在关闭dialog后就会清空表单里的数据,再次打开dialog就不会有上次编辑留下的内容','/articles/2019/04/30/1556597518556.html','0',1556597518608,1556597518608,0.9997748242707916,'1','','https://img.hacpai.com/bing/20190107.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597542345','ubuntu安装NVIDIA驱动','','https://www.cnblogs.com/luofeel/p/8654964.html','linux','1556594816141','https://www.cnblogs.com/luofeel/p/8654964.html','/articles/2019/04/30/1556597542345.html','0',1556597542397,1556597542397,0.999398526085686,'1','','https://img.hacpai.com/bing/20180831.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597576302','springmvc请求响应原理','','https://blog.csdn.net/J080624/article/details/56278461 https://blog.csdn.net/J080624/article/details/56278869','java,转载','1556594816141','https://blog.csdn.net/J080624/article/details/56278461\r\nhttps://blog.csdn.net/J080624/article/details/56278869','/articles/2019/04/30/1556597576302.html','0',1556597576405,1556597576405,0.9999649230679566,'1','','https://img.hacpai.com/bing/20180724.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597596626','vue中删除数组中的指定数据','','this.tmp = this.tmp.filter(t =&gt; t.id != id)','vue','1556594816141','this.tmp = this.tmp.filter(t => t.id != id) ','/articles/2019/04/30/1556597596626.html','0',1556597596678,1556597596678,0.9994456176673725,'1','','https://img.hacpai.com/bing/20190221.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597671424','spring aware 接口','','类名  作用     BeanNameAware  获得到容器中Bean 的名称   BeanFactoryAware  获得当前bean factory ，即创建Bean的工厂   ApplicationContextAware*  当前的application context ，获取当前应用上下文   MessageSourceAware  获得message source ，这样可以获得文本信息   ApplicationEventPublisherAware  应用事件发布器，可以发布事件   ResourceLoaderAware  获得资源加载器，可以获得外部资源、文件    Spring Aware 的目的是为了让Bean 获得Spring 容器的服务。因为ApplicationContext 接口集成了MessageSource 接口、ApplicationEventPublisher 接口和ResourceLoader 接口，所以Bean 继承ApplicationContextAware 可以获得Spring 容器的所有服务，原则上用到什么接口，就实现什么接口。','java,spring','1556594816141','| 类名 | 作用 |\n| --- | --- |\n| BeanNameAware | 获得到容器中Bean 的名称 |\n| BeanFactoryAware | 获得当前bean factory ，即创建Bean的工厂 |\n| ApplicationContextAware* | 当前的application context ，获取当前应用上下文 |\n| MessageSourceAware | 获得message source ，这样可以获得文本信息 |\n| ApplicationEventPublisherAware | 应用事件发布器，可以发布事件 |\n| ResourceLoaderAware | 获得资源加载器，可以获得外部资源、文件 |\n\nSpring Aware 的目的是为了让Bean 获得Spring 容器的服务。因为ApplicationContext 接口集成了MessageSource 接口、ApplicationEventPublisher 接口和ResourceLoader 接口，所以Bean 继承ApplicationContextAware 可以获得Spring 容器的所有服务，原则上用到什么接口，就实现什么接口。','/articles/2019/04/30/1556597671424.html','0',1556597671527,1556597671527,0.999828536477054,'1','','https://img.hacpai.com/bing/20190405.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597690037','java 类加载','','什么时候类加载？ 第一次使用类信息的时候。 触发类加载的条件？ 调用静态成员时，会加载静态成员真正所在的类及其父类。 第一次 new 对象的时候 加载(第二次再 new 同一个类时，不需再加载) 加载子类会先加载父类。 如果静态属性有 final 修饰时，则不会加载，当成常量使用。 如果访问的是类的公开静态常量，那么如果编译器在编译的时候能确定这个常量的值，就不会被加载；如果编译时不能确定其值的话，则运行时加载','java','1556594816141','什么时候类加载？\r\n第一次使用类信息的时候。\r\n触发类加载的条件？\r\n调用静态成员时，会加载静态成员真正所在的类及其父类。\r\n第一次 new 对象的时候 加载(第二次再 new 同一个类时，不需再加载)\r\n加载子类会先加载父类。\r\n如果静态属性有 final 修饰时，则不会加载，当成常量使用。\r\n如果访问的是类的公开静态常量，那么如果编译器在编译的时候能确定这个常量的值，就不会被加载；如果编译时不能确定其值的话，则运行时加载\r\n\r\n','/articles/2019/04/30/1556597690037.html','0',1556597690089,1556597690089,0.000019476805771634353,'1','','https://img.hacpai.com/bing/20181122.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597714304','谷歌浏览器的正确使用方式','','浏览器种类很多，但是作为一个开发人员来说谷歌浏览器确实是不错的，因为调试起来不但方便，更重要的是有很多超级好用的插件，下面列举几个自己用过的插件跟大家分享一下。 首先因为我们不能直接访问谷歌商店，可以先去这个地方案件一个插件就可以访问谷歌商店也能登陆谷歌账号了。 1.fireshot 浏览器截图插件 2.restlet client 用来测试rest api的插件 3.划词翻译 在浏览器中直接选中一个单词，会弹出一个按钮点击会直接翻译，是不是很方便 4.vue devtool这个是专为vue开发的一个插件，自己用的不多，看起来好像对于调试vue程序挺有用的 5.loom这个插件很有意思，类似一个录屏软件，可以把你的整个屏幕录进去，如果你愿意可以把自己的画面迭加进去类似于主播直播的那种，更重要的是录好的视频他会给你存到云端，并给你一个链接，访问这个链接就可以看到视频了 这里没有详细介绍如何使用插件，因为我认为使用起来很简单（根本原因是我这上传图片太麻烦），更多好玩有用的插件等着你去发现。','其它','1556594816141','浏览器种类很多，但是作为一个开发人员来说谷歌浏览器确实是不错的，因为调试起来不但方便，更重要的是有很多超级好用的插件，下面列举几个自己用过的插件跟大家分享一下。\r\n首先因为我们不能直接访问谷歌商店，可以先去[这个地方](http://www.ggfwzs.com/)案件一个插件就可以访问谷歌商店也能登陆谷歌账号了。\r\n1.fireshot 浏览器截图插件\r\n2.restlet client 用来测试rest api的插件\r\n3.划词翻译 在浏览器中直接选中一个单词，会弹出一个按钮点击会直接翻译，是不是很方便\r\n4.vue devtool这个是专为vue开发的一个插件，自己用的不多，看起来好像对于调试vue程序挺有用的\r\n5.loom这个插件很有意思，类似一个录屏软件，可以把你的整个屏幕录进去，如果你愿意可以把自己的画面迭加进去类似于主播直播的那种，更重要的是录好的视频他会给你存到云端，并给你一个链接，访问这个链接就可以看到视频了\r\n\r\n这里没有详细介绍如何使用插件，因为我认为使用起来很简单（根本原因是我这上传图片太麻烦），更多好玩有用的插件等着你去发现。','/articles/2019/04/30/1556597714304.html','0',1556597714412,1556597714412,0.00002412866794609947,'1','','https://img.hacpai.com/bing/20180408.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597736999','JDBC在getConnection之前为什么要调用Class.forName','','　　获取一个数据库连接的通用模板如下： 　　 　　String driver = “oracle.jdbc.OracleDriver”; 　　String url = “jdbc:oracle:thin:@127.0.0.1:1521:orcl”; 　　String user = “scott”; 　　String password = “ticmy”; 　　Class.forName(driver); 　　Connection conn = DriverManager.getConnection(url, user, password); 　　里面有个Class.forName(driver)，这句话有什么作用？将驱动类load到内存？如果没有这句会怎么样？运行发现，如果去掉这一句会有以下异常： java.sql.SQLException: No suitable driver found for xxx…. 　　在解释具体原因之前先简单看下Class.forName做了什么。 假设一个类以前从来没有被装进内存过，Class.forName(String className)这个方法....','java','1556594816141','\r\n　　获取一个数据库连接的通用模板如下：\r\n　　\r\n　　String driver = \"oracle.jdbc.OracleDriver\";\r\n　　String url = \"jdbc:oracle:thin:@127.0.0.1:1521:orcl\";\r\n　　String user = \"scott\";\r\n　　String password = \"ticmy\";\r\n　　Class.forName(driver);\r\n　　Connection conn = DriverManager.getConnection(url, user, password);\r\n　　里面有个Class.forName(driver)，这句话有什么作用？将驱动类load到内存？如果没有这句会怎么样？运行发现，如果去掉这一句会有以下异常：\r\njava.sql.SQLException: No suitable driver found for xxx….\r\n　　在解释具体原因之前先简单看下Class.forName做了什么。\r\n假设一个类以前从来没有被装进内存过，Class.forName(String className)这个方法会做以下几件事情：\r\n1、装载。将字节码读入内存，并产生一个与之对应的java.lang.Class类对象\r\n2、连接。这一步会验证字节码，为static变量分配内存，并赋默认值（0或null），并可选的解析符号引用（这里不理解没关系）\r\n3、初始化。为类的static变量赋初始值，假如有static int a = 1;这个将a赋值为1的操作就是这个时候做的。除此之外，还要调用类的static块。（这一步是要点）\r\n　　Class.forName(String className)方法会将这三步都做掉，如下面的例子：\r\n　　\r\n　　package com.ticmy.oracle;\r\n　　public class TestClinit {\r\n　　public static void main(String[] args) throws Exception {\r\n　　Class.forName(\"com.ticmy.oracle.ABC\");\r\n　　}\r\n　　}\r\n　　class ABC {\r\n　　private static int a = getNum();\r\n　　static {\r\n　　System.out.println(\"this is static block\");\r\n　　}\r\n　　public static int getNum() {\r\n　　System.out.println(\"getNum\");\r\n　　return 1;\r\n　　}\r\n　　}\r\n　　程序的运行结果是：\r\ngetNum\r\nthis is static block\r\n　　那么，Class.forName(driver)这个driver类里有没有什么static块呢？去探究一下。例子用的是Oracle，反编译下oracle.jdbc.OracleDriver，发现其继承了oracle.jdbc.driver.OracleDriver，那么继续看这个oracle.jdbc.driver.OracleDriver，确实有个static块，里面有这样的代码：\r\n　　\r\n　　static {\r\n　　Timestamp localTimestamp = Timestamp.valueOf(\"2000-01-01 00:00:00.0\");\r\n　　try {\r\n　　if (defaultDriver == null) {\r\n　　defaultDriver = new OracleDriver();\r\n　　DriverManager.registerDriver(defaultDriver);\r\n　　}\r\n　　} catch (RuntimeException localRuntimeException) {\r\n　　} catch (SQLException localSQLException){}\r\n　　_Copyright_2004_Oracle_All_Rights_Reserved_ = null;\r\n　　}\r\n　　再看看mysql吧：com.mysql.jdbc.Driver：\r\n同样发现了static块，里面代码如下：\r\n　　\r\n　　static {\r\n　　try {\r\n　　DriverManager.registerDriver(new Driver());\r\n　　} catch (SQLException E) {\r\n　　throw new RuntimeException(\"Can\'t register driver!\");\r\n　　}\r\n　　}\r\n　　再看一个db2：com.ibm.db2.jcc.DB2Driver：\r\n也发现了static块：\r\n　　\r\n　　static {\r\n　　if (o.Nb != null) {\r\n　　exceptionsOnLoadDriver__ = dg.a(o.Nb, exceptionsOnLoadDriver__);\r\n　　}\r\n　　try {\r\n　　registeredDriver__ = new DB2Driver();\r\n　　DriverManager.registerDriver(registeredDriver__);\r\n　　}\r\n　　catch (SQLException localSQLException) {\r\n　　exceptionsOnLoadDriver__ = new SqlException(null,\r\n　　\"Error occurred while trying to register Jcc driver with JDBC 1 Driver Manager\");\r\n　　exceptionsOnLoadDriver__.setNextException(localSQLException);\r\n　　}\r\n　　}\r\n　　无一例外地，发现里面都有DriverManager.registerDriver(driver)的调用。那么是不是可以将开头的例子中的Class.forName换成DriverManager.registerDriver呢？\r\n　　\r\n　　String url = \"jdbc:oracle:thin:@127.0.0.1:1521:orcl\";\r\n　　String user = \"scott\";\r\n　　String password = \"ticmy\";\r\n　　DriverManager.registerDriver(new OracleDriver());\r\n　　Connection conn = DriverManager.getConnection(url, user, password);\r\n　　System.out.println(conn);\r\n　　conn.close();\r\n　　经过测试发现OK。现在，已经知道Class.forName(driver)的根本目的就是为了调用DriverManager.registerDriver。\r\n　　Class.forName还有个重载的方法：Class.forName(String name, boolean initialize, ClassLoader loader)，Class.forName(String className)就等价于Class.forName(className, true, currentLoader)，注意中间的参数为true，这个参数的含义就是要不要初始化。如果此参数为true且指定的类以前没有被初始化过，就会去初始化。\r\n　　另外，jdbc4已经不需要显式的调用Class.forName了，在jdbc4中，调用getConnection的时候DriverManager会自动去加载合适的驱动。\r\n  \r\n  原文地址：https://zhidao.baidu.com/question/1883950384548877068.html','/articles/2019/04/30/1556597736999.html','0',1556597737051,1556597737051,0.8931611184827333,'1','','https://img.hacpai.com/bing/20180822.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597763587','vue使用外部配置文件','','第一步：安装generate-asset-webpack-plugin插件 npm install --save-dev generate-asset-webpack-plugin  第二步：安装vue-resource npm install vue-resource  第三步：配置webpack.prod.conf.js文件 var GenerateAssetPlugin = require(\'generate-asset-webpack-plugin\') var createServerConfig = function(compilation){ let cfgJson={ApiUrl:\"ws://127.0.0.1:8082/JServer/ws\"}; return JSON.stringify(cfgJson); }  在plugins[]中加入如下代码 new GenerateAssetPlugin({ filename: ‘serverconfig.json‘, fn: (compilation, cb) =&gt; { cb(null, createServerCon....','vue','1556594816141','第一步：安装generate-asset-webpack-plugin插件\r\n```\r\nnpm install --save-dev generate-asset-webpack-plugin\r\n```\r\n第二步：安装vue-resource\r\n```\r\nnpm install vue-resource\r\n```\r\n第三步：配置webpack.prod.conf.js文件\r\n```\r\nvar GenerateAssetPlugin = require(\'generate-asset-webpack-plugin\')\r\nvar createServerConfig = function(compilation){\r\n  let cfgJson={ApiUrl:\"ws://127.0.0.1:8082/JServer/ws\"};\r\n  return JSON.stringify(cfgJson);\r\n}\r\n```\r\n在plugins[]中加入如下代码\r\n```\r\nnew GenerateAssetPlugin({\r\n        filename: ‘serverconfig.json‘,\r\n        fn: (compilation, cb) => {\r\n            cb(null, createServerConfig(compilation));\r\n        },\r\n        extraFiles: []\r\n    })\r\n```\r\n在static目录创建一个文件serverconfig.json\r\n```\r\n{\r\n	\"ApiUrl\":\"ws://172.30.20.101/.../\"\r\n}\r\n```\r\n第四步：获取ApiUrl\r\n\r\n在main.js中 引入vue-resource，并定义了一个获取Apiurl的全局函数\r\n```\r\nimport VueResource from \'vue-resource\'\r\nVue.use(VueResource)\r\nVue.prototype.getConfigJson=function(){\r\n  this.$http.get(\"static/serverconfig.json\").then((result)=>{\r\n    //用一个全局字段保存ApiUrl  也可以用sessionStorage存储\r\n    console.log(\"result:\"+result)\r\n    Vue.prototype.ApiUrl=result.body.ApiUrl;\r\n  }).catch((error)=>{console.log(error)});\r\n}\r\n```\r\n第五步：使用Apiurl\r\n```\r\n//在app.vue里面  执行this.getConfigJson();\r\nmounted:function(){\r\n      this.getConfigJson();\r\n}\r\n//之后...用在需要用到的地方  因为ApiUrl已经是全局了 可以直接用this.ApiUrl\r\nvar url=this.ApiUrl\r\n```\r\n','/articles/2019/04/30/1556597763587.html','0',1556597763639,1556597763639,0.000057257957517320435,'1','','https://img.hacpai.com/bing/20181009.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597791101','spring监听器的使用','','** Spring Boot 事件监听 ** 初学Spring事件监听，对其概念和实现方式并不熟悉，只浅学了皮毛刚刚会用，故记录在此已备后用。 在写事件前需要在Config配置中加入配置 package gov.kchange.config; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @ComponentScan(“gov.kchange.event”) public class EventConfig { } 事件监听分为3部分 1、事件 指事件其本身可以用来记录一些相关信息 package gov.kchange.event; import javafx.application.Application; import org.springframework.context.ApplicationEvent; /** * 创建人：madmk * 创建时间：....','java,spring','1556594816141','**\r\n\r\nSpring Boot 事件监听\r\n** \r\n初学Spring事件监听，对其概念和实现方式并不熟悉，只浅学了皮毛刚刚会用，故记录在此已备后用。\r\n\r\n在写事件前需要在Config配置中加入配置\r\n\r\npackage gov.kchange.config;\r\n\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\n@ComponentScan(\"gov.kchange.event\")\r\npublic class EventConfig {\r\n}\r\n\r\n事件监听分为3部分 \r\n1、事件 \r\n指事件其本身可以用来记录一些相关信息\r\n\r\npackage gov.kchange.event;\r\n\r\nimport javafx.application.Application;\r\nimport org.springframework.context.ApplicationEvent;\r\n\r\n/**\r\n * 创建人：madmk\r\n * 创建时间：2017/9/6 15:52\r\n * 创建项目：gov.kchange.applicationevent\r\n * 用途：自定义事件\r\n * 主要方法：\r\n */\r\npublic class DomeEvent extends ApplicationEvent {\r\nprivate  String msg;\r\n    public DomeEvent(Object source,String msg) {\r\n        super(source);\r\n        this.msg=msg;\r\n    }\r\n\r\n    public String getMsg() {\r\n        return msg;\r\n    }\r\n\r\n    public void setMsg(String msg) {\r\n        this.msg = msg;\r\n    }\r\n}\r\n\r\n2、事件监听器 \r\n用来监听事件可定义多个\r\n\r\npackage gov.kchange.event;\r\n\r\nimport org.springframework.context.ApplicationEvent;\r\nimport org.springframework.context.ApplicationListener;\r\nimport org.springframework.scheduling.annotation.Async;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * 创建人：madmk\r\n * 创建时间：2017/9/6 15:54\r\n * 创建项目：gov.kchange.applicationevent\r\n * 用途：自定义事件监听器\r\n * 主要方法：\r\n */\r\n@Async//注1\r\n@Component\r\npublic class DemoListener implements ApplicationListener<DomeEvent>{\r\n\r\n\r\n    @Override\r\n    public void onApplicationEvent(DomeEvent domeEvent) {\r\n        System.out.printf(\"监听：\"+domeEvent.getMsg());\r\n\r\n    }\r\n}\r\n\r\n3、事件发布 \r\n用于事件发布（发布后监听器会执行）\r\n\r\npackage gov.kchange.event;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * 创建人：madmk\r\n * 创建时间：2017/9/6 15:57\r\n * 创建项目：gov.kchange.applicationevent\r\n * 用途：事件发布类\r\n * 主要方法：\r\n */\r\n@Component\r\npublic class DemoPublisher {\r\n    @Autowired\r\n    ApplicationContext applicationContext;\r\n\r\n    public void publish(String msg){\r\n        applicationContext.publishEvent(new DomeEvent(this,msg));//注2\r\n    }\r\n}\r\n\r\n注1：@Async//加入该注释后表明事件执行为异步执行（可写在方法或类上） \r\n注2：为发布事件语句可写在任何方法中当程序执行到此时所有有关监听器会响应并执行监听器方法\r\n\r\n原文地址：https://blog.csdn.net/madmk/article/details/77869377','/articles/2019/04/30/1556597791101.html','0',1556597791154,1556597791154,0.17086109566297059,'1','','https://img.hacpai.com/bing/20180919.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597812726','Linux查看文件大小','','1.ll -ht total 1.8G -rw-rw-rw- 1 root root 844M Aug 10 11:06 content50063_1533866373.ts -rw-rw-rw- 1 root root 845M Aug 10 11:06 content50063_1533868173.ts -rw-rw-rw- 1 root root 130M Aug 10 11:04 content50063_1533869973.ts 2.du -sh * 如果指定文件名则只显示指定文件的大小 root@Server:/data/dist/1533870240383# du -sh * 920M content50063_1533866373.ts 914M content50063_1533868173.ts 130M content50063_1533869973.ts','linux','1556594816141','1.ll -ht\r\ntotal 1.8G\r\n-rw-rw-rw- 1 root root 844M Aug 10 11:06 content50063_1533866373.ts\r\n-rw-rw-rw- 1 root root 845M Aug 10 11:06 content50063_1533868173.ts\r\n-rw-rw-rw- 1 root root 130M Aug 10 11:04 content50063_1533869973.ts\r\n\r\n2.du -sh * 如果指定文件名则只显示指定文件的大小\r\nroot@Server:/data/dist/1533870240383# du -sh *\r\n920M	content50063_1533866373.ts\r\n914M	content50063_1533868173.ts\r\n130M	content50063_1533869973.ts\r\n','/articles/2019/04/30/1556597812726.html','0',1556597812779,1556597812779,0.40488647133333233,'1','','https://img.hacpai.com/bing/20181009.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597834695','ApplicationContextAware','','加载Spring配置文件时，如果Spring配置文件中所定义或者注解自动注入的Bean类实现了ApplicationContextAware 接口，那么在加载Spring配置文件时，会自动调用ApplicationContextAware 接口中的setApplicationContext(ApplicationContext context) ，获得了ApplicationContext对象之后，就可以获取容器中的bean，那我们不是可以通过注入的方式去使用吗？为何还要多此一举，因为有的时候是不能依靠注入来做的，比如说一个静态方法需要使用一个bean的时候，这个时候只能通过applicationContext.getBean(“XXX.class”) 获取对象。','java','1556594816141','加载Spring配置文件时，如果Spring配置文件中所定义或者注解自动注入的Bean类实现了ApplicationContextAware 接口，那么在加载Spring配置文件时，会自动调用ApplicationContextAware 接口中的setApplicationContext(ApplicationContext context) ，获得了ApplicationContext对象之后，就可以获取容器中的bean，那我们不是可以通过注入的方式去使用吗？为何还要多此一举，因为有的时候是不能依靠注入来做的，比如说一个静态方法需要使用一个bean的时候，这个时候只能通过applicationContext.getBean(\"XXX.class\") 获取对象。\r\n','/articles/2019/04/30/1556597834695.html','0',1556597834746,1556597834746,0.000017101644783967807,'1','','https://img.hacpai.com/bing/20180405.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597881370','HandlerMethodArgumentResolver 参数解析器','','  虽然Spring提供了比较完善的参数解析器，但是对于一些特殊的数据类型我们还是需要进行特殊处理，这样会提高代码的复杂度，增加冗余的代码，降低代码可读性和可维护性。所以自定义参数解析器是一个很好的解决方案，是的时候对编码人员也是透明的，非常方便。   还有一点需要注意的是，本篇博客自定义参数解析器使用的方法是通过继承AbstractNamedValueMethodArgumentResolver类实现的，而我们经常使用的注解@RequestParam的参数解析器也是继承自AbstractNamedValueMethodArgumentResolver类。当然还有一种解决方案是通过实现HandlerMethodArgumentResolver接口来实现，但是区别的是如果通过HandlerMethodArgumentResolver接口来实现的话，在解析器中会获取到所有的参数，而我们还需要另外写代码在一串参数中的到我们需要处理的参数再进行处理。而通过继承AbstractNamedValueMethodArgumentResolver类来实现的话，因为AbstractNamedValueM....','java,spring','1556594816141','  虽然Spring提供了比较完善的参数解析器，但是对于一些特殊的数据类型我们还是需要进行特殊处理，这样会提高代码的复杂度，增加冗余的代码，降低代码可读性和可维护性。所以自定义参数解析器是一个很好的解决方案，是的时候对编码人员也是透明的，非常方便。\r\n\r\n  还有一点需要注意的是，本篇博客自定义参数解析器使用的方法是通过继承AbstractNamedValueMethodArgumentResolver类实现的，而我们经常使用的注解@RequestParam的参数解析器也是继承自AbstractNamedValueMethodArgumentResolver类。当然还有一种解决方案是通过实现HandlerMethodArgumentResolver接口来实现，但是区别的是如果通过HandlerMethodArgumentResolver接口来实现的话，在解析器中会获取到所有的参数，而我们还需要另外写代码在一串参数中的到我们需要处理的参数再进行处理。而通过继承AbstractNamedValueMethodArgumentResolver类来实现的话，因为AbstractNamedValueMethodArgumentResolver类本身就实现了HandlerMethodArgumentResolver接口，所以我们在参数解析器中得到的是一个一个的参数，处理起来相对简单。\r\n\r\n  本项目是用SpringBoot写的，自定义用于将字符串解析为Date时间类型的参数解析器。\r\n\r\n1、项目目录结构 \r\n略\r\n\r\n2、RequestDateParam\r\n\r\npackage com.xyc.argumentresolver.annotation;\r\n\r\nimport com.xyc.argumentresolver.constant.DateFormatPattern;\r\n\r\nimport java.lang.annotation.*;\r\n\r\n/**\r\n * Created by xyc on 2017/7/27 0027.\r\n */\r\n@Documented\r\n@Target({ElementType.PARAMETER})\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface RequestDateParam {\r\n    String value() default \"\";\r\n\r\n    DateFormatPattern pattern() default DateFormatPattern.YYYY_MM_DD_HH_MM_SS;\r\n\r\n    boolean required() default true;\r\n}\r\n\r\n3、DateFormatPattern\r\n\r\npackage com.xyc.argumentresolver.constant;\r\n\r\n/**\r\n * Created by xyc on 2017/7/29 0029.\r\n */\r\npublic enum DateFormatPattern {\r\n    YYYY_MM_DD(\"yyyy-MM-dd\"), YYYY_MM_DD_HH_MM_SS(\"yyyy-MM-dd hh:mm:ss\");\r\n    private String value;\r\n\r\n    DateFormatPattern(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\n4、ArgumentResolverApplication\r\n\r\npackage com.xyc.argumentresolver;\r\n\r\nimport com.xyc.argumentresolver.resolver.RequestDateParamMethodArgumentResolver;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\r\n\r\nimport java.util.List;\r\n\r\n@SpringBootApplication\r\npublic class ArgumentResolverApplication extends WebMvcConfigurerAdapter {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ArgumentResolverApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\r\n        argumentResolvers.add(new RequestDateParamMethodArgumentResolver());    //添加自定义参数解析器\r\n    }\r\n}\r\n\r\n5、ArgumentResolverController\r\n\r\npackage com.xyc.argumentresolver.controller;\r\n\r\nimport com.xyc.argumentresolver.annotation.RequestDateParam;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.Date;\r\n\r\n/**\r\n * Created by xyc on 2017/7/27 0027.\r\n */\r\n@RestController\r\n@RequestMapping(\"/argumentResolver\")\r\npublic class ArgumentResolverController {\r\n    @RequestMapping(value = \"/requestDateParamTest\", method = RequestMethod.GET)\r\n    public String requestDateParamTest(@RequestDateParam Date date) {\r\n        System.out.println(date);\r\n        return \"success value is \" + date;\r\n    }\r\n}\r\n\r\n6、RequestDateParamMethodArgumentResolver\r\n\r\npackage com.xyc.argumentresolver.resolver;\r\n\r\nimport com.xyc.argumentresolver.annotation.RequestDateParam;\r\nimport org.springframework.core.MethodParameter;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.bind.MissingServletRequestParameterException;\r\nimport org.springframework.web.context.request.NativeWebRequest;\r\nimport org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver;\r\n\r\nimport javax.servlet.ServletException;\r\nimport java.text.SimpleDateFormat;\r\n\r\n/**\r\n * Created by xyc on 2017/7/29 0029.\r\n */\r\n@Component\r\npublic class RequestDateParamMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver {\r\n    /**\r\n     * 获取当前参数的注解信息\r\n     *\r\n     * @param methodParameter 需要被解析的Controller参数\r\n     * @return\r\n     */\r\n    @Override\r\n    protected NamedValueInfo createNamedValueInfo(MethodParameter methodParameter) {\r\n        RequestDateParam annotation = (RequestDateParam) methodParameter.getParameterAnnotation(RequestDateParam.class);\r\n        return new NamedValueInfo(annotation.value(), annotation.required(), (String) null);\r\n    }\r\n\r\n    /**\r\n     * 在这里进行参数的类型转换\r\n     *\r\n     * @param s\r\n     * @param methodParameter  需要被解析的Controller参数\r\n     * @param nativeWebRequest 当前request\r\n     * @return 转换后的参数值\r\n     * @throws Exception\r\n     */\r\n    @Override\r\n    protected Object resolveName(String s, MethodParameter methodParameter, NativeWebRequest nativeWebRequest) throws Exception {\r\n        String content = nativeWebRequest.getParameter(s);\r\n        if (content == null) {\r\n            return null;\r\n        } else {\r\n            try {\r\n                RequestDateParam annotation = methodParameter.getParameterAnnotation(RequestDateParam.class);\r\n                SimpleDateFormat dateFormat = new SimpleDateFormat(annotation.pattern().getValue());\r\n                return dateFormat.parse(content);\r\n            } catch (Exception e) {\r\n                throw new IllegalArgumentException(\"Date format conversion error\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析器是否支持当前参数\r\n     *\r\n     * @param methodParameter 需要被解析的Controller参数\r\n     * @return\r\n     */\r\n    @Override\r\n    public boolean supportsParameter(MethodParameter methodParameter) {\r\n        return methodParameter.hasParameterAnnotation(RequestDateParam.class);\r\n    }\r\n\r\n    /**\r\n     * 当前参数值为空且注解的默认值也为空则抛出异常\r\n     *\r\n     * @param name      参数名\r\n     * @param parameter 需要被解析的Controller参数\r\n     * @throws ServletException\r\n     */\r\n    @Override\r\n    protected void handleMissingValue(String name, MethodParameter parameter) throws ServletException {\r\n        throw new MissingServletRequestParameterException(name, parameter.getParameterType().getSimpleName());\r\n    }\r\n}\r\n\r\n注意：如果是SpringMVC项目，则需要将参数解析器注册到HandlerAdapter中\r\n\r\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\">\r\n\r\n        <property name=\"requestDateParamMethodArgumentResolver\">\r\n            <list>\r\n                <bean class=\"com.xyc.argumentresolver.resolver.RequestDateParamMethodArgumentResolver\" />\r\n            </list>\r\n        </property>\r\n        <property name=\"order\" value=\"0\" />\r\n    </bean>\r\n原文地址：	https://blog.csdn.net/xyc_csdn/article/details/76377082','/articles/2019/04/30/1556597881370.html','0',1556597881430,1556597881430,0.8838669927002779,'1','','https://img.hacpai.com/bing/20190419.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597905706','Spring-Boot整合freemarker设置静态资源的访问','','有以下三种方式： 1.默认采用springboot 静态资源路径在src/main/resources创建/static 或 /public 或 /resources 或 /META-INF/resources可以直接访问静态资源，默认会放到classpath目录中 2.通过application.properties配置spring.resources.static-locations=classpath:/img/ 指定自定义静态文件的目录位置，多个使用逗号分隔 3.创建StaticController类继承WebMvcConfigurerAdapter 重写addResourceHandlers 指定静态访问资源目录','java,springboot','1556594816141','有以下三种方式：\r\n1.默认采用springboot 静态资源路径在src/main/resources创建/static 或 /public 或 /resources 或 /META-INF/resources可以直接访问静态资源，默认会放到classpath目录中\r\n\r\n2.通过application.properties配置spring.resources.static-locations=classpath:/img/ 指定自定义静态文件的目录位置，多个使用逗号分隔\r\n\r\n3.创建StaticController类继承WebMvcConfigurerAdapter 重写addResourceHandlers 指定静态访问资源目录','/articles/2019/04/30/1556597905706.html','0',1556597905809,1556597905809,0.00010258608789670554,'1','','https://img.hacpai.com/bing/20190121.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597930465','springboot WebMvcConfigurerAdapter ','','常用的重写方法，springboot中默认使用的是Jackson，如果想换成fastjson也可以在这个类里面配置，具体实现这里不再一一举例。 /** 解决跨域问题 **/ public void addCorsMappings(CorsRegistry registry) ; /** 添加拦截器 **/ void addInterceptors(InterceptorRegistry registry); /** 这里配置视图解析器 **/ void configureViewResolvers(ViewResolverRegistry registry); /** 配置内容裁决的一些选项 **/ void configureContentNegotiation(ContentNegotiationConfigurer configurer); /** 视图跳转控制器 **/ void addViewControllers(ViewControllerRegistry registry); /** 静态资源处理 **/ void addResourceHandlers(Resourc....','java,springboot','1556594816141','常用的重写方法，springboot中默认使用的是Jackson，如果想换成fastjson也可以在这个类里面配置，具体实现这里不再一一举例。\r\n```\r\n/** 解决跨域问题 **/\r\npublic void addCorsMappings(CorsRegistry registry) ;\r\n/** 添加拦截器 **/\r\nvoid addInterceptors(InterceptorRegistry registry);\r\n/** 这里配置视图解析器 **/\r\nvoid configureViewResolvers(ViewResolverRegistry registry);\r\n/** 配置内容裁决的一些选项 **/\r\nvoid configureContentNegotiation(ContentNegotiationConfigurer configurer);\r\n/** 视图跳转控制器 **/\r\nvoid addViewControllers(ViewControllerRegistry registry);\r\n/** 静态资源处理 **/\r\nvoid addResourceHandlers(ResourceHandlerRegistry registry);\r\n/** 默认静态资源处理器 **/\r\nvoid configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);\r\n```\r\n\r\nSpringboot 2.0中该接口已经过时，参考以下方式：\r\n1.直接实现WebMvcConfigurer\r\n2.直接继承WebMvcConfigurationSupport','/articles/2019/04/30/1556597930465.html','0',1556597930517,1556597930517,0.0001812855677263414,'1','','https://img.hacpai.com/bing/20180826.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597960094','jsessionid','','我们都知道session是保存在服务器端，而cookie是保存在浏览器端的。如果有一些信息需要在用户的浏览活动中一直保持，我们可以把这些信息在每次请求的时候作为参数传递给服务器，但这样做既麻烦又耗费资源，我们可以选择session保存用户的信息。 服务器上为每个用户都保存了一个session，那当用户请求过来的时候是怎么知道某一个用户应该对应哪个session呢？ 每个session都有对应的id，这个id会返回给浏览器，jsessionid就是浏览器用来保存这个id的。每次客户端请求都会把这个id传到服务器，服务器根据id来匹配这次请求应该使用哪个session，一般对于web应用来说，客户端变量都会保存在cookie中，jsessionid也不例外。不过与一般的cookie变量不同，jsessionid是保存在内存cookie中的，所以当你打开浏览器的调试窗口在cookie那里是看不到jsessionid的。内存cookie在打开一个浏览器窗口的时候会创建，在关闭这个浏览器窗口的时候也同时销毁。','java','1556594816141','我们都知道session是保存在服务器端，而cookie是保存在浏览器端的。如果有一些信息需要在用户的浏览活动中一直保持，我们可以把这些信息在每次请求的时候作为参数传递给服务器，但这样做既麻烦又耗费资源，我们可以选择session保存用户的信息。\r\n服务器上为每个用户都保存了一个session，那当用户请求过来的时候是怎么知道某一个用户应该对应哪个session呢？\r\n每个session都有对应的id，这个id会返回给浏览器，jsessionid就是浏览器用来保存这个id的。每次客户端请求都会把这个id传到服务器，服务器根据id来匹配这次请求应该使用哪个session，一般对于web应用来说，客户端变量都会保存在cookie中，jsessionid也不例外。不过与一般的cookie变量不同，jsessionid是保存在内存cookie中的，所以当你打开浏览器的调试窗口在cookie那里是看不到jsessionid的。内存cookie在打开一个浏览器窗口的时候会创建，在关闭这个浏览器窗口的时候也同时销毁。','/articles/2019/04/30/1556597960094.html','0',1556597960148,1556597960148,0.00006344145886649777,'1','','https://img.hacpai.com/bing/20190118.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556597984728','springboot跨域问题','','什么是跨域？ 跨域是指 不同域名之间相互访问，端口不通也会引起跨域。跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。如a网站想要通过ajax获取b网站的数据，就会出现跨域问题 解决跨域 添加一个过滤器，实现Filter接口，重写dofilter方法： @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { HttpServletResponse httpResponse = (HttpServletResponse) response; HttpServletRequest httpRequest = (HttpServletRequest) request; httpResponse.setHeader(\"Access-Control-Allow-Origin\", \"允许跨域网站的域名\"); ht....','java,springboot','1556594816141','什么是跨域？\r\n跨域是指 不同域名之间相互访问，端口不通也会引起跨域。跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。如a网站想要通过ajax获取b网站的数据，就会出现跨域问题\r\n解决跨域\r\n添加一个过滤器，实现Filter接口，重写dofilter方法：\r\n```\r\n@Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\r\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\r\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n        httpResponse.setHeader(\"Access-Control-Allow-Origin\", \"允许跨域网站的域名\");\r\n        httpResponse.setHeader(\"Access-Control-Allow-Methods\", httpRequest.getMethod());\r\n        httpResponse.setHeader(\"Access-Control-Max-Age\", \"3600\");\r\n        httpResponse.setHeader(\"Access-Control-Allow-Headers\", httpRequest.getHeader(\"Access-Control-Request-Headers\"));\r\n        httpResponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n\r\n        // 解决IE浏览器缓存的问题\r\n        httpResponse.setDateHeader(\"Expires\", -1);\r\n\r\n        chain.doFilter(request, response);\r\n    }\r\n```\r\n\r\n如果只是允许某一个controller方法允许跨域，则在相应的controller方法上添加@CrossOrigin注解即可','/articles/2019/04/30/1556597984728.html','0',1556597984781,1556597984781,0.9898992578830245,'1','','https://img.hacpai.com/bing/20180209.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598007294','@Autowired与@Resource的区别','','当在spring中一个接口有多个实现类的时候，只写一个@Autowired是报错的，所以参考以下方式，指定qualifier与实现类的名字相同或者在@Resource注解中指定name。 如果一个类被Service注解修饰，这个组件默认的名字就是类名，也可以自己指定，如@Service(“userServiceImpl”) @Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用 如： public class TestServiceImpl { @Autowired @Qualifier(\"userDao\") private UserDao userDao; }  @Resource默认按照ByName自动注入，由J2EE提供，@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。 public class TestServiceImpl { // 下....','java','1556594816141','当在spring中一个接口有多个实现类的时候，只写一个@Autowired是报错的，所以参考以下方式，指定qualifier与实现类的名字相同或者在@Resource注解中指定name。\r\n如果一个类被Service注解修饰，这个组件默认的名字就是类名，也可以自己指定，如@Service(\"userServiceImpl\")\r\n\r\n@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用\r\n如：\r\n```\r\npublic class TestServiceImpl {\r\n    @Autowired\r\n    @Qualifier(\"userDao\")\r\n    private UserDao userDao; \r\n}\r\n```\r\n@Resource默认按照ByName自动注入，由J2EE提供，@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。\r\n```\r\npublic class TestServiceImpl {\r\n    // 下面两种@Resource只要使用一种即可\r\n    @Resource(name=\"userDao\")\r\n    private UserDao userDao; // 用于字段上\r\n    \r\n    @Resource(name=\"userDao\")\r\n    public void setUserDao(UserDao userDao) { // 用于属性的setter方法上\r\n        this.userDao = userDao;\r\n    }\r\n}\r\n```','/articles/2019/04/30/1556598007294.html','0',1556598007346,1556598007346,0.00017198476851865152,'1','','https://img.hacpai.com/bing/20190107.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598031426','maven学习记录','','&lt;project&gt; &lt;profiles&gt; &lt;profile&gt; &lt;build&gt; &lt;defaultGoal&gt;...&lt;/defaultGoal&gt; &lt;finalName&gt;...&lt;/finalName&gt; &lt;resources&gt;...&lt;/resources&gt; &lt;testResources&gt;...&lt;/testResources&gt; &lt;plugins&gt;...&lt;/plugins&gt; &lt;/build&gt; &lt;reporting&gt;...&lt;/reporting&gt; &lt;modules&gt;...&lt;/modules&gt; &lt;dependencies&gt;...&lt;/dependencies&gt; &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt; &lt;distributionManagement&gt;...&lt;/d....','maven','1556594816141','```\r\n<project>\r\n <profiles>\r\n <profile>\r\n <build>\r\n <defaultGoal>...</defaultGoal>\r\n <finalName>...</finalName>\r\n <resources>...</resources>\r\n <testResources>...</testResources>\r\n <plugins>...</plugins>\r\n </build>\r\n <reporting>...</reporting>\r\n <modules>...</modules>\r\n <dependencies>...</dependencies>\r\n <dependencyManagement>...</dependencyManagement>\r\n <distributionManagement>...</distributionManagement>\r\n <repositories>...</repositories>\r\n <pluginRepositories>...</pluginRepositories>\r\n <properties>...</properties>\r\n </profile>\r\n </profiles>\r\n</project>\r\n```\r\n\r\n```\r\n在任何Maven项目中都有一些隐式的属性，这些隐式的属性是：\r\nproject.*\r\nMaven的项目对象模型（POM）。你可以使用该project.*前缀来引用任何在Maven\r\nPOM中的值。\r\nsettings.*\r\nMaven Settings。你使用该settings.*前缀来引用~/.m2/settings.xml文件中\r\nMaven Settings的值。\r\nenv.*\r\n环境变量如PATH和M2_HOME可以使用env.*前缀来引用。\r\n系统属性\r\n任何可以通过System.getProperty()方法获取的属性都可以作为Maven属性被引\r\n用\r\n```\r\nMaven暴露所有来自于java.lang.System的属性。任何你能从System.getProperty()获取\r\n的属性都能以Maven属性的形式引用。下面的表格列出了所有可用的系统属性：\r\n系统属性 描述\r\njava.version Java运行环境版本\r\njava.vendor Java运行环境供应商\r\njava.vendor.url Java供应商URL\r\njava.home Java安装目录\r\njava.vm.specification.version Java虚拟机规格说明版本\r\njava.vm.specification.vendor Java虚拟机规格说明供应商\r\njava.vm.specification.name Java虚拟机规格说明名称\r\njava.vm.version Java虚拟机实现版本\r\njava.vm.vendor Java虚拟机实现供应商\r\njava.vm.name Java虚拟机实现名称\r\njava.specification.version Java运行环境规格说明版本\r\njava.specification.vendor Java运行环境规格说明供应商\r\njava.specification.name Java运行环境规格说明名称\r\njava.class.version Java类格式版本号\r\njava.class.path Java类路径\r\njava.ext.dirs 扩展目录的路径\r\nos.name 操作系统名称\r\nos.arch 操作系统架构\r\nos.version 操作系统版本\r\nfile.separator 文件分隔符（UNIX上是\"/\"，Windows上是\"\\\"）\r\npath.separator 路径分隔符（UNIX上是\":\"，Windows上是\";\"）\r\nline.separator 行分隔符（在UNIX和Windows上都是\"\\n\"）\r\nuser.name 用户帐户名称\r\nuser.home 用户home目录\r\nuser.dir 用户当前工作目录','/articles/2019/04/30/1556598031426.html','0',1556598031477,1556598031477,0.34996136040451165,'1','','https://img.hacpai.com/bing/20171126.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598055996','使用dstat查看实时网速','','1.安装dstat工具 apt install dstat 2.如果不能正常安装出现以下错误： E: Unmet dependencies. Try ‘apt-get -f install’ with no packages (or specify a solution). 3.运行apt-get -f install命令 4.apt install dstat 5.使用dstat命令： usr sys idl wai hiq siq| read writ| recv send| in out | int csw 6 13 79 1 0 1|1306k 5319k| 0 0 |9544B 25k| 27k 61k 6 13 78 1 0 1|4992k 217k|7844k 6687k| 0 0 | 33k 68k 6 15 77 0 0 1|2944k 0 |9632k 5584k| 0 0 | 33k 68k 6 13 78 1 0 1|4096k 0 |7778k 5697k| 0 0 | 33k 68k 6 14 80 0 0 1|4864k 16k|9556k 6429k| ....','linux','1556594816141','1.安装dstat工具\r\napt install dstat\r\n2.如果不能正常安装出现以下错误：\r\nE: Unmet dependencies. Try \'apt-get -f install\' with no packages (or specify a solution).\r\n3.运行apt-get -f install命令\r\n4.apt install dstat\r\n5.使用dstat命令：\r\nusr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw \r\n  6  13  79   1   0   1|1306k 5319k|   0     0 |9544B   25k|  27k   61k\r\n  6  13  78   1   0   1|4992k  217k|7844k 6687k|   0     0 |  33k   68k\r\n  6  15  77   0   0   1|2944k    0 |9632k 5584k|   0     0 |  33k   68k\r\n  6  13  78   1   0   1|4096k    0 |7778k 5697k|   0     0 |  33k   68k\r\n  6  14  80   0   0   1|4864k   16k|9556k 6429k|   0    16k|  36k   69k\r\n  6  13  80   1   0   1|3968k   88k|7764k 6412k|   0     0 |  33k   67k\r\n  7  14  76   2   0   1|4900k  257k|9604k 6912k| 164k   16k|  36k   70k\r\n  7  13  78   1   0   1|3840k  569k|7907k 7260k|   0     0 |  34k   70k\r\n  6  14  79   1   0   1|4864k    0 |9389k 5232k|   0     0 |  34k   70k\r\n  6  13  80   0   0   1|2816k    0 |7816k 5299k|   0     0 |  33k   71k\r\n  6  14  78   1   0   1|2948k   96k|9964k 5036k|4096B    0 |  37k   71k\r\n  6  14  78   1   0   1|6016k   16k|7616k 7380k|   0    16k|  35k   69k','/articles/2019/04/30/1556598055996.html','0',1556598056048,1556598056048,0.00012262582910871345,'1','','https://img.hacpai.com/bing/20180727.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598080848','maven常用命令','\n','跳过测试： mvn install -Dmaven.test.skip=true 创建一个web项目： mvn archetype:create -DgroupId=org.sonatype.mavenbook.ch05 -DartifactId=simple-webapp -DpackageName=org.sonatype.mavenbook -DarchetypeArtifactId=maven-archetype-webapp 查看当前项目的有效pom： mvn help:effective-pom maven命令之下载依赖jar包到指定位置： mvn dependency:copy-dependencies -DoutputDirectory=F:\\\\lib\\','maven','1556594816141','跳过测试：\nmvn install -Dmaven.test.skip=true\n创建一个web项目：\nmvn archetype:create -DgroupId=org.sonatype.mavenbook.ch05\n-DartifactId=simple-webapp\n-DpackageName=org.sonatype.mavenbook\n-DarchetypeArtifactId=maven-archetype-webapp\n查看当前项目的有效pom：\nmvn help:effective-pom\n\nmaven命令之下载依赖jar包到指定位置：\n\nmvn dependency:copy-dependencies -DoutputDirectory=F:\\\\\\lib\\\n','/articles/2019/04/30/1556598080848.html','1',1556598080899,1588761469150,0.6168117495245842,'1','','https://img.hacpai.com/bing/20190623.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598101661','java中定时器Timer的用法','','在指定时间后执行某一任务 public static void timer(int a){ System.out.println(\"aaa\"+a); Timer timer = new Timer(); timer.schedule(new TimerTask() { @Override public void run() { System.out.println(\"输出：\"+a); timer.cancel(); } }, a*1000); public static void main(String args[]){ timer(9); timer(6); timer(3); System.out.println(\"end..........\"); }','java','1556594816141','在指定时间后执行某一任务\r\n```\r\npublic static void timer(int a){\r\n		System.out.println(\"aaa\"+a);\r\n		Timer timer = new Timer();\r\n		timer.schedule(new TimerTask() {\r\n			@Override\r\n			public void run() {\r\n				System.out.println(\"输出：\"+a);\r\n				timer.cancel();\r\n			}\r\n		}, a*1000);\r\n		\r\npublic static void main(String args[]){\r\n		timer(9);\r\n		timer(6);\r\n		timer(3);\r\n		System.out.println(\"end..........\");\r\n	}\r\n```','/articles/2019/04/30/1556598101661.html','0',1556598101713,1556598101713,0.0003975721585747216,'1','','https://img.hacpai.com/bing/20181115.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598125885','el-table中添加日期选择器','','','vue','1556594816141','<el-table-column\r\n        prop=\"taskStartTime\"\r\n        label=\"任务开始时间\"\r\n      >\r\n        <template scope=\"scope\">\r\n          <el-date-picker type=\"datetime\" clearable :editable=\"false\" v-model=\"scope.row.taskStartTime\" value-format=\"yyyy-MM-dd HH:mm:ss\"\r\n                          format=\"yyyy-MM-dd HH:mm:ss\"></el-date-picker>\r\n        </template>\r\n      </el-table-column>\r\n	  \r\n	  ','/articles/2019/04/30/1556598125885.html','0',1556598125937,1556598125937,0.0003398326671928409,'1','','https://img.hacpai.com/bing/20190124.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598147706','springboot 控制台输出乱码','','在pom文件中加入以下内容  -Dfile.encoding=UTF-8','java,springboot','1556594816141','在pom文件中加入以下内容\r\n<properties>\r\n    <argLine>-Dfile.encoding=UTF-8</argLine>\r\n</properties>','/articles/2019/04/30/1556598147706.html','0',1556598147759,1556598147759,0.999709960693569,'1','','https://img.hacpai.com/bing/20190324.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598173527','bootstrap table定时刷新数据','','每隔30秒刷新一次 setInterval(function() { $(“#table”).bootstrapTable(‘refresh’) }, 30000);','bootstrap','1556594816141','每隔30秒刷新一次\r\nsetInterval(function() {\r\n            $(\"#table\").bootstrapTable(\'refresh\')\r\n        }, 30000);','/articles/2019/04/30/1556598173527.html','0',1556598173630,1556598173630,0.0003637855152501812,'1','','https://img.hacpai.com/bing/20180314.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598192921','windows中关闭指定占用端口','','1.查找对应的端口占用的进程：netstat -aon|findstr “8080” ，找到占用8080端口对应的程序的PID号： 2.根据PID号找到对应的程序：tasklist|findstr “PID号” ，找到对应的程序名 3.结束该进程：taskkill /f /t /im 程序名 Linux中可以使用 lsof -i:端口号，查出进程号，然后kill -9 进程号 即可强制关闭端口','windows','1556594816141','1.查找对应的端口占用的进程：netstat  -aon|findstr  \"8080\"    ，找到占用8080端口对应的程序的PID号：\r\n\r\n2.根据PID号找到对应的程序：tasklist|findstr \"PID号\"    ，找到对应的程序名\r\n\r\n3.结束该进程：taskkill /f /t /im 程序名\r\n\r\n\r\nLinux中可以使用 lsof -i:端口号，查出进程号，然后kill -9 进程号   即可强制关闭端口','/articles/2019/04/30/1556598192921.html','0',1556598193024,1556598193024,0.00019881549656108888,'1','','https://img.hacpai.com/bing/20180323.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598212191','elementui el-table格式化','','&lt;el-table stripe :data=\"tableData.List\" border style=\"width: 100%\"&gt; &lt;el-table-column type=\"index\" width=\"60\" align=\'center\'&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"CorpName\" label=\"企业名称\" align=\'center\'&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=\"Merchno\" label=\"商户号\" width=\"180\" align=\'center\'&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"Mediumno\" width=\"180\" label=\"钱包ID\" align=\'center\'&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=\"Email\" label=\"....','vue','1556594816141','     <el-table stripe :data=\"tableData.List\" border style=\"width: 100%\">\r\n        <el-table-column type=\"index\" width=\"60\" align=\'center\'></el-table-column>\r\n        <el-table-column prop=\"CorpName\" label=\"企业名称\" align=\'center\'> </el-table-column>\r\n        <el-table-column prop=\"Merchno\" label=\"商户号\" width=\"180\" align=\'center\'></el-table-column>\r\n        <el-table-column prop=\"Mediumno\" width=\"180\" label=\"钱包ID\" align=\'center\'></el-table-column>\r\n        <el-table-column prop=\"Email\" label=\"企业邮箱\" width=\"250\" align=\'center\'> </el-table-column>\r\n        <el-table-column prop=\"IsAudit\"  :formatter=\"formatterColumn\" label=\"审核状态\" width=\"120\" align=\'center\'></el-table-column>\r\n        <el-table-column prop=\"UpdatedOnUTC\" width=\"180\" label=\"审核时间\" align=\'center\'></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"70\" align=\'center\'>\r\n            <template scope=\"scope\">\r\n       <el-button  type=\"text\" size=\"small\" @click=\"handleEditFun( scope.row)\" >审核</el-button>\r\n     </template>\r\n	 \r\n	 methods: {\r\n        ...mapActions([\r\n            \'getCompanyData\'\r\n        ]),\r\n        //状态改成汉字\r\n        formatterColumn(row, column) {\r\n            switch(row.IsAudit){\r\n                case 0:\r\n                return \'未通过\';\r\n                break;\r\n\r\n                case 1:\r\n                return \'审核通过\';\r\n                break;\r\n\r\n                case 10:\r\n                return \'待审核\';\r\n                break;\r\n\r\n\r\n                case 9:\r\n                return \'草稿\';\r\n                break;\r\n                default:\r\n                return \'未知\';\r\n            }\r\n        },\r\n}','/articles/2019/04/30/1556598212191.html','0',1556598212242,1556598212242,0.00011281650995031978,'1','','https://img.hacpai.com/bing/20190416.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598233011','配置mysql可以远程连接','','1.进入mysql，切换到mysql数据库 2.update user set host=‘%’ where user=‘root’ and host=‘localhost’; 3.exit 4.service mysql restart 5.如果还是无法连接，开放3306端口。 ufw allow 3306 6.如果还是无法连接，修改MySQL的配置文件/etc/mysql/my.cnf，注释掉#bind-address = 127.0.0.1 也有可能不是这个文件，反正就是mysql的配置文件： /etc/mysql/my.cnf (Debian linux) /etc/my.cnf （Red Hat Linux/Fedora Linux) /var/db/mysql/my.cnf (FreeBSD) /etc/mysql/mysql.conf.d/mysqld.cnf（ubuntu）','mysql','1556594816141','1.进入mysql，切换到mysql数据库\r\n2.update user set host=\'%\' where user=\'root\' and host=\'localhost\';\r\n3.exit\r\n4.service mysql restart\r\n5.如果还是无法连接，开放3306端口。 ufw allow 3306\r\n6.如果还是无法连接，修改MySQL的配置文件/etc/mysql/my.cnf，注释掉#bind-address = 127.0.0.1        \r\n也有可能不是这个文件，反正就是mysql的配置文件：\r\n/etc/mysql/my.cnf (Debian linux)\r\n/etc/my.cnf （Red Hat Linux/Fedora Linux)\r\n/var/db/mysql/my.cnf (FreeBSD)\r\n/etc/mysql/mysql.conf.d/mysqld.cnf（ubuntu）','/articles/2019/04/30/1556598233011.html','0',1556598233063,1556598233063,0.000016491806993479408,'1','','https://img.hacpai.com/bing/20181225.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598252203','mysql解压缩版安装步骤','','1.解压缩下载的压缩文件。 2.配置环境变量，如 path:D:\\mysql-5.7.21-winx64\\bin 3.检查压缩文件根目录下my-default.ini配置是否正确 [mysqld] basedir=D:\\mysql-5.7.21-winx64 datadir=D:\\mysql-5.7.21-winx64\\data 4.如果没有这个文件，就新建一个，把上面的复制进去。 5.以管理员身份运行cmd，进入到mysql的bin目录 6.执行mysqld –install 7.net start mysql 8.第七步的时候如果提示服务无法启动，到mysql的bin目录下执行 mysqld –initialize-insecure 9.重新执行net start mysql 10.第一次登陆没有密码 mysql -u root -p 直接回车就可以登陆 11.为rooty用户分配密码：ALTER USER ‘root’@‘localhost’ IDENTIFIED BY ‘新密码’ PASSWORD EXPIRE NEVER;','mysql','1556594816141','1.解压缩下载的压缩文件。\r\n2.配置环境变量，如 path:D:\\mysql-5.7.21-winx64\\bin\r\n3.检查压缩文件根目录下my-default.ini配置是否正确\r\n	[mysqld] \r\n    basedir=D:\\mysql-5.7.21-winx64 \r\n    datadir=D:\\mysql-5.7.21-winx64\\data  \r\n4.如果没有这个文件，就新建一个，把上面的复制进去。\r\n5.以管理员身份运行cmd，进入到mysql的bin目录\r\n6.执行mysqld --install\r\n7.net start mysql\r\n8.第七步的时候如果提示服务无法启动，到mysql的bin目录下执行  mysqld  --initialize-insecure\r\n9.重新执行net start mysql\r\n10.第一次登陆没有密码 mysql -u root -p 直接回车就可以登陆\r\n11.为rooty用户分配密码：ALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'新密码\' PASSWORD EXPIRE NEVER;','/articles/2019/04/30/1556598252203.html','0',1556598252254,1556598252254,0.008369236205724717,'1','','https://img.hacpai.com/bing/20190124.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1556598273842','vue中小数点保留两位小数','','value = Number(val); value = value.toFixed(2);','vue','1556594816141','value  = Number(val);\r\nvalue = value.toFixed(2);','/articles/2019/04/30/1556598273842.html','0',1556598273894,1556610559509,0.0002442997391213231,'1','','https://img.hacpai.com/bing/20180222.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1557371972715','mysql常用命令','','desc tabl_name; 显示表结构，字段类型，主键，是否为空等属性，但不显示外键。  查询列的注释信息 select column_name, column_comment from information_schema.columns where table_schema =\'db\' and table_name = \'tablename\' ;   查询表的注释 select table_name,table_comment from information_schema.tables where table_schema = \'db\' and table_name =\'tablename\'   查询建表DDL show create table table_name \\G;   建表命令 CREATE TABLE `t_sold_order` ( `id` int(11) NOT NULL AUTO_INCREMENT, `dt` date DEFAULT NULL COMMENT \'日期\', `hour` tinyint(2) DEFAULT \'0\' COMMENT \'小....','mysql','1556594816141','![](https://img.hacpai.com/bing/20181004.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n1. desc tabl_name;\n\n	显示表结构，字段类型，主键，是否为空等属性，但不显示外键。\n2. 查询列的注释信息\n	```\n	select column_name, column_comment from information_schema.columns where table_schema =\'db\' and table_name = \'tablename\' ;\n	```\n3. 查询表的注释\n	```\n	select table_name,table_comment from information_schema.tables where table_schema = \'db\' and table_name =\'tablename\'\n	```\n4. 查询建表DDL\n	```\n	show create table table_name \\G;\n	```\n5. 建表命令\n	```\n	CREATE TABLE `t_sold_order` (  \n	`id` int(11) NOT NULL AUTO_INCREMENT,  \n	`dt` date DEFAULT NULL COMMENT \'日期\',  \n	`hour` tinyint(2) DEFAULT \'0\' COMMENT \'小时\',  \n	`hour_order` int(11) DEFAULT \'0\' COMMENT \'小时订单数\',  \n	`total_order` int(11) DEFAULT \'0\' COMMENT \'总的订单数\',  \n	`prediction` int(11) DEFAULT \'0\' COMMENT \'预测订单数\',  \n	PRIMARY KEY (`id`),  \n	UNIQUE KEY `dt_hour` (`dt`,`hour`)  \n	) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=\'实时订单数\'\n	```\n6. 复制表结构\n	```\n	create table table1 like table;\n	```\n7. 创建用户\n	```\n	CREATE USER \'username\'@\'host\' IDENTIFIED BY \'password\';\n	username：你将创建的用户名\n	host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符`%`\n	password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n	```\n8. 给用户授权\n	```\n	GRANT privileges ON databasename.tablename TO \'username\'@\'host\'\n	privileges：用户的操作权限，如`SELECT`，`INSERT`，`UPDATE`等，如果要授予所的权限则使用`ALL`\n	databasename：数据库名\n	tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用`*`表示，如`*.*`\n\n	GRANT privileges ON databasename.tablename TO \'username\'@\'host\' WITH GRANT OPTION; 让被授权的用户可以给其他用户授权\n	```\n9. 设置与更改用户密码\n	```\n	SET PASSWORD FOR \'username\'@\'host\' = PASSWORD(\'newpassword\');\n	SET PASSWORD = PASSWORD(\"newpassword\"); //如果是当前登陆的用户\n	```\n10. 撤销用户权限\n	`REVOKE privilege ON databasename.tablename FROM \'username\'@\'host\';`\n11. 删除用户\n	`DROP USER \'username\'@\'host\';`\n	---------------------------------------------2019-5-10更新---------------------------------------------------------\n12. 当前运行的所有事务\n	`select * from information_schema.innodb_trx\\G;`\n13. 杀掉某一个事务\n	`kill 线程id `   // 线程ID（trx_mysql_thread_id）\n14. 当前出现的锁\n	`select * from information_schema.innodb_locks\\G;`\n15. 锁等待的对应关系\n	`select * from information_schema.innodb_lock_waits\\G;`\n16. 查看锁的情况\n	```\n	show status like \'innodb_row_lock_%\';\n	Innodb_row_lock_current_waits : 当前等待锁的数量  \n	Innodb_row_lock_time : 系统启动到现在，锁定的总时间长度   \n	Innodb_row_lock_time_avg : 每次平均锁定的时间   \n	Innodb_row_lock_time_max : 最长一次锁定时间   \n	Innodb_row_lock_waits : 系统启动到现在总共锁定的次数\n	```\n17. 查询进程\n	`show processlist\\G  # \\G 结构旋转90度变成纵向`\n18. 查看当前数据库默认隔离级别\n	`select @@global.tx_isolation;`\n19. 查看是否默认自动提交事务\n	`show global variables like \'autocommit\';`\n20. 查看数据库默认存储引擎\n	` show engines;`\n21. 分组查询\n	加入有一个学生表，有id， name， sex 三个字段，按sex分组的话查询出来的name只有一个，怎么把所有属于同一个sex组的name拼接起来呢(group_concat(name)默认以逗号分隔，group_concat(列名,\",\",\"分隔符\"))\n	```\n	SELECT group_concat(name) as name,sex FROM studentGROUP BY sex;\n	张三,李四,赵六,Mr Adword,孙八	男\n	王五,Mr lili	女\r\n	田七	保密\r\n	```\n22. 常用聚合函数\n	AVG(col)返回指定列的平均值\n	COUNT(col)返回指定列中非NULL值的个数\n	 MIN(col)返回指定列的最小值\n 	MAX(col)返回指定列的最大值\n	SUM(col)返回指定列的所有值之和\n	 GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果\r','/articles/2019/05/09/1557371972715.html','1',1557371972768,1559112233414,0.27297947694708435,'1','','https://img.hacpai.com/bing/20181004.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1561696028187','js查询对象数组中某个字段的最大最小值','','var array=[ { \"index_id\": 119, \"area_id\": \"18335623\", \"name\": \"满意度\", \"value\": \"100\" }, { \"index_id\": 119, \"area_id\": \"18335624\", \"name\": \"满意度\", \"value\": \"20\" }, { \"index_id\": 119, \"area_id\": \"18335625\", \"name\": \"满意度\", \"value\": \"80\" }]; 找出该数组中value最大或最小的对象  Math.max.apply(Math, array.map(function(o) {return o.value})) Math.min.apply(Math, array.map(function(o) {return o.value}))','vue,js','1556594816141','\n```\nvar array=[ { \"index_id\": 119, \"area_id\": \"18335623\", \"name\": \"满意度\", \"value\": \"100\" }, { \"index_id\": 119, \"area_id\": \"18335624\", \"name\": \"满意度\", \"value\": \"20\" }, { \"index_id\": 119, \"area_id\": \"18335625\", \"name\": \"满意度\", \"value\": \"80\" }];\n找出该数组中value最大或最小的对象\n```\n`Math.max.apply(Math, array.map(function(o) {return o.value}))\r\n`\n`Math.min.apply(Math, array.map(function(o) {return o.value}))`\n','/articles/2019/06/28/1561696028187.html','0',1561696028289,1561696028289,0.9800033279216404,'1','','https://img.hacpai.com/bing/20180815.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1562038406615','spring集成mybatis 开启接口绑定的方式','spring集成mybatis 接口绑定','spring集成mybatis 接口绑定','mybatis,spring','1556594816141','1 . 引入mybatis依赖\n	\n```\n	<dependency>\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>3.4.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\n``````\n2 . 在spring的配置文件中配置\n\n```\n	<!-- mybatis文件配置，扫描所有mapper文件 -->\r\n\n	<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"\r\n		p:dataSource-ref=\"dataSource\">\r\n		<!-- p:configLocation=\"/WEB-INF/conf/mybatis-config.xml\" -->\r\n		<!-- configLocation为mybatis属性 mapperLocations为所有mapper -->\r\n		<property name=\"mapperLocations\" value=\"classpath:/com/***/mapper/*.xml\"></property>\r\n<!--		<property name=\"typeAliasesPackage\" value=\"com.***.model\" />-->\r\n		<!-- <property name=\"configLocation\" value=\"/WEB-INF/conf/mybatis-config.xml\"></property> -->\r\n	</bean>\r\n\r\n	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->\r\n	<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n		<property name=\"basePackage\" value=\"com.xxx.mapper\" />\r\n		<property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"></property>\r\n	</bean>\n\n	```\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\">\r\n\n		<property name=\"driverClassName\">\r\n			<value>${jdbc.driverClassName}</value>\r\n		</property>\r\n		<property name=\"url\">\r\n			<value>${jdbc.url}</value>\r\n		</property>\r\n		<property name=\"username\">\r\n			<value>${jdbc.username}</value>\r\n		</property>\r\n		<property name=\"password\">\r\n			<value>${jdbc.password}</value>\r\n		</property>\r\n		<!-- 连接池最大使用连接数 -->\r\n		<property name=\"maxActive\">\r\n			<value>20</value>\r\n		</property>\r\n		<!-- 初始化连接大小 -->\r\n		<property name=\"initialSize\">\r\n			<value>1</value>\r\n		</property>\r\n		<!-- 获取连接最大等待时间 -->\r\n		<property name=\"maxWait\">\r\n			<value>60000</value>\r\n		</property>\r\n		<!-- 连接池最大空闲 -->\r\n		<property name=\"maxIdle\">\r\n			<value>20</value>\r\n		</property>\r\n		<!-- 连接池最小空闲 -->\r\n		<property name=\"minIdle\">\r\n			<value>3</value>\r\n		</property>\r\n		<!-- 自动清除无用连接 -->\r\n		<property name=\"removeAbandoned\">\r\n			<value>true</value>\r\n		</property>\r\n		<!-- 清除无用连接的等待时间 -->\r\n		<property name=\"removeAbandonedTimeout\">\r\n			<value>180</value>\r\n		</property>\r\n		<!-- 连接属性 -->\r\n		<property name=\"connectionProperties\">\r\n			<value>clientEncoding=UTF-8</value>\r\n		</property>\r\n	</bean>\n\n	<bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n		<property name=\"locations\">\r\n			<list>\r\n				<value>/WEB-INF/conf/db.properties</value>\r\n			</list>\r\n		</property>\r\n	</bean>\n```\n3 . 注意点\n	接口中中的方法名、参数类型要与mapper文件中定义的一致\n	mapper文件中的namespace是接口的全限定名，如：`com.***.dao.UserDao`\n4 .使用\n	在需要使用的地方直接使用`@Autowired`注入','/articles/2019/07/02/1562038406615.html','0',1562038406718,1562038406718,0.0006450543285347887,'1','','https://img.hacpai.com/bing/20171126.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1570593659752','vue+elementui table分页多选','vue+elementui table分页多选','vue+elementui table分页多选','vue','1556594816141','原文地址:https://segmentfault.com/a/1190000019263783\n```\n<el-table\n:data=\"list\"\nref=\"multipleTable\"\n:row-key=\"(row)=>{ return row.classId}\"\n@selection-change=\"handleSelectionChange\"\nstyle=\"width: 100%\">\n<el-table-column type=\"selection\" :reserve-selection=\"true\" ></el-table-column>\n</el-table> \n```\n\n//切换分页持久化选中表格\n\n```\n:row-key=\"(row)=>{ return row.classId}\"\n:reserve-selection=\"true\" \n```\n\n//@selection-change 会返回所有选中的数据  \n//@select 会返回所有选中的数据及当前操作的数据\n\n清空所有选中\n------\n\n`this.$refs.multipleTable.clearSelection();`//页面中有搜索或重置时可能会用到。\n\n默认选中\n----\n\n`this.$refs.multipleTable.toggleRowSelection(this.list[index]);`//必须传表格的数据；以数组[下标]格式传递\n\n单选框\n---\n\n```\n<el-table\n      :data=\"list\"\n      ref=\"multipleTable\"\n      :row-key=\"(row)=>{ return row.classId}\"\n      @current-change=\"handleCurrentRadio\"\n      style=\"width: 100%\">\n      <el-table-column width=\"80\" v-if=\"radioShow\">\n        <template slot-scope=\"scope\">\n          <el-radio v-model=\"radio\"  :label=\"scope.row.classId\">{{\'\'}}</el-radio>\n        </template>\n              </el-table-column>\n    </el-table> \n```\n\n//`@current-change=\"handleCurrentRadio\"`会返回选中的数据。可以在这个事件用return false 来阻止选中   \n//label 和原生的value属性一样。 利用v-model来绑定唯一值，意味着label的值为唯一的。  \n//{{\"\"}}为了让单选框不显示label。','/articles/2019/10/09/1570593659752.html','0',1570593659803,1570593659803,0.0002142673728945388,'1','','https://img.hacpai.com/bing/20171120.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1570594803091','给elementUI table添加一个模糊搜索功能','','tableData是表格绑定的model(即过滤后的数据),sourceData是表格的原始数据 &lt;el-input placeholder=\"请输入设备名称\" icon=\"search\" v-model=\"devfilter\" class=\"search-input\"&gt;&lt;/el-input&gt; data () { return{ devfilter: \'\', sourceData: [{\"id\": \"1\", \"name\": \"node1\"},{\"id\": \"2\", \"name\": \"node2\"}], tableData: [] } } watch: { devfilter: function(val, oldVal){ this.tableData = this.sourceData.filter( item =&gt; (~item.name.indexOf(val))); } },','待分类','1556594816141','![](https://img.hacpai.com/bing/20181109.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\ntableData是表格绑定的model(即过滤后的数据),sourceData是表格的原始数据\n```\n<el-input placeholder=\"请输入设备名称\" icon=\"search\" v-model=\"devfilter\" class=\"search-input\"></el-input>\ndata () {\n	return{\n		devfilter: \'\',\n		sourceData: [{\"id\": \"1\", \"name\": \"node1\"},{\"id\": \"2\", \"name\": \"node2\"}],\n		tableData: []\n	}\n}\nwatch: {\n	devfilter: function(val, oldVal){\n		this.tableData = this.sourceData.filter( item => (~item.name.indexOf(val)));  \n	}\n},\n```','/articles/2019/10/09/1570594803091.html','0',1570594803143,1570594803143,0.0016718663175996351,'1','','https://img.hacpai.com/bing/20181109.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1576049668148','element table 日期前端排序','','首先在el-table中添加属性@sort-schange &lt;el-table ref=\"recoverHisTable\" @sort-change=\"sortDate\" 在列上添加支持排序 sortable &lt;el-table-column sortable=\"custom\" 编写自定义排序方法 (recoverProgressList是待排序的列表)  sortDate: function (val) { if (undefined === this.recoverProgressList || this.recoverProgressList.length === 0) { return } let list = JSON.parse(JSON.stringify(this.recoverProgressList)) let isDesc = val.order === \'descending\' let key = val.prop this.recoverProgressList = list.sort(function (a, b) { var dateA = n....','vue,elementui','1556594816141','![](https://img.hacpai.com/bing/20190922.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n1. 首先在el-table中添加属性@sort-schange\n`<el-table ref=\"recoverHisTable\" @sort-change=\"sortDate\"`\n2. 在列上添加支持排序 sortable\n`<el-table-column sortable=\"custom\"`\n3. 编写自定义排序方法\n(`recoverProgressList`是待排序的列表)\n\n```\nsortDate: function (val) {\r\n\n      if (undefined === this.recoverProgressList || this.recoverProgressList.length === 0) {\r\n        return\r\n      }\r\n      let list = JSON.parse(JSON.stringify(this.recoverProgressList))\r\n      let isDesc = val.order === \'descending\'\r\n      let key = val.prop\r\n      this.recoverProgressList = list.sort(function (a, b) {\r\n        var dateA = new Date(a[key])\r\n        var dateB = new Date(b[key])\r\n        if (isDesc) {\r\n          return dateA <= dateB ? 1 : -1\r\n        } else {\r\n          return dateA >= dateB ? 1 : -1\r\n        }\r\n      })\r\n    },\n``````','/articles/2019/12/11/1576049668148.html','0',1576049668250,1576049668250,0.0004523268615066467,'1','','https://img.hacpai.com/bing/20190922.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1576049827658','git修改上次提交的用户名邮箱','','git commit --amend --author=\"作者 &lt;邮箱@xxxx.com&gt;\" --no-edit','git','1556594816141','```\ngit commit --amend --author=\"作者 <邮箱@xxxx.com>\" --no-edit\n```','/articles/2019/12/11/1576049827658.html','0',1576049827760,1576049827760,0.0016145115671796217,'1','','https://img.hacpai.com/bing/20190314.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1576050228745','mysql正在进行的事务','','查看mysql正在运行的线程 show processlist; 查询 正在执行的事务： SELECT * FROM information_schema.INNODB_TRX 查看正在锁的事务 SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; 查看等待锁的事务 SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;```','mysql','1556594816141','![](https://img.hacpai.com/bing/20190922.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n```\n查看mysql正在运行的线程\nshow processlist;\n\n查询 正在执行的事务：\r\n\nSELECT * FROM information_schema.INNODB_TRX\r\n\r\n查看正在锁的事务\r\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; \r\n\r\n查看等待锁的事务\r\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;```\n\n\n\n\n','/articles/2019/12/11/1576050228745.html','0',1576050228796,1576050228796,0.0014811847633101616,'1','','https://img.hacpai.com/bing/20190922.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1576121885241','mysql间隙锁','','InnoDB工作在_可重复读隔离级别下，并且以Next-Key Lock的方式对数据行进行加锁，这样可以有效防止幻读_的发生. 注释: Next-Key Lock是行锁与间隙锁的组合，这样，当InnoDB扫描索引记录的时候，会首先对选中的索引记录加上_行锁（Record Lock），再对索引记录两边的间隙（向左扫描扫到第一个比给定参数小的值， 向右扫描扫描到第一个比给定参数大的值， 然后以此为界，构建一个区间）加上间隙锁（Gap Lock）。如果一个间隙被一个事务加了锁，其它事务是不能在这个间隙插入记录的_。所以间隙锁在InnoDB的唯一作用就是防止其它事务的插入操作，以此来达到防止幻读的发生，所以间隙锁不分什么共享锁与排它锁','mysql','1556594816141','![](https://img.hacpai.com/bing/20190401.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n\nInnoDB工作在_**可重复读**_隔离级别下，并且以_**Next-Key Lock**_的方式对数据行进行加锁，这样可以有效防止_**幻读**_的发生.\n\n注释: Next-Key Lock是行锁与间隙锁的组合，这样，当InnoDB扫描索引记录的时候，会首先对选中的索引记录加上_**行锁（Record Lock）**_，再对索引记录两边的间隙（向左扫描扫到第一个比给定参数小的值， 向右扫描扫描到第一个比给定参数大的值， 然后以此为界，构建一个区间）加上_**间隙锁（Gap Lock）**_。_**如果一个间隙被一个事务加了锁，其它事务是不能在这个间隙插入记录的**_。所以间隙锁在InnoDB的唯一作用就是防止其它事务的插入操作，以此来达到防止幻读的发生，所以间隙锁不分什么共享锁与排它锁','/articles/2019/12/12/1576121885241.html','0',1576121885292,1576121885292,0.0014105865729610034,'1','','https://img.hacpai.com/bing/20190401.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1581068229696','vue中使用JSON.stringify报错','JSON.stringify 报错\n','JSON.stringify 报错','vue','1556594816141','正确写法(JSON前面要 加window)\n```\nlocalStorage.setItem(\'car\', window.JSON.stringify(state.car))\n```\n\n转自: https://www.jianshu.com/p/c0a57f07b913\n','/articles/2020/02/07/1581068229696.html','0',1581068229758,1581068229758,0.0004176833526146062,'1','','https://img.hacpai.com/bing/20190720.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1595084400553','鼓楼','\n','您的浏览器不支持 audio 元素。','待分类','1556594816141','![](https://img.hacpai.com/bing/20171110.jpg?imageView2/1/w/960/h/540/interlace/1/q/100)\n\n\n\n\n\n\n<audio controls>\n  <source src=\"https://b3logfile.com/file/2020/07/鼓楼-45d89a41.mp3\" type=\"audio/ogg\">\n  <source src=\"\" type=\"audio/mpeg\">\n您的浏览器不支持 audio 元素。\n</audio>\n','/articles/2020/07/18/1595084400553.html','0',1595084400605,1595085130995,0.0014187323464095458,'1','','https://img.hacpai.com/bing/20171110.jpg?imageView2/1/w/960/h/540/interlace/1/q/100',0),('1595088381996','视频','\n','视频来源于网络，仅供娱乐    您的浏览器不支持Video标签。      您的浏览器不支持Video标签。       您的浏览器不支持Video标签。      您的浏览器不支持Video标签。      您的浏览器不支持Video标签。      您的浏览器不支持Video标签。      您的浏览器不支持Video标签。','待分类','1556594816141','视频来源于网络，仅供娱乐\n\n<div style=\"width: 100%\">\n	<video width=\"320\" height=\"240\" controls=\"controls\" style=\"inline:block\">\n  <source src=\"https://b3logfile.com/file/2020/07/0b06cdf5d75342ac90d6717efa62917f-ab6e32bd.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<div style=\"width: 100%\">\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n<source src=\"https://b3logfile.com/file/2020/07/2be44cb336904153af9f0fa00b97fcd7-6308d7ca.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<div style=\"width: 100%\">\n<label style=\"width:100%\"></label>\n<video width=\"320\" height=\"240\" controls=\"controls\">\n<source src=\"https://b3logfile.com/file/2020/07/5dccdf51291f40d7898c53026b560948-2adbee02.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<div style=\"width: 100%\">\n<video width=\"320\" height=\"240\" controls=\"controls\">\n<source src=\"https://b3logfile.com/file/2020/07/220b84fad895e3d4ed6b4e87e39b5404828115b53a9000013b6500f0fbf-5e074c8e.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<div style=\"width: 100%\">\n<video width=\"320\" height=\"240\" controls=\"controls\">\n<source src=\"https://b3logfile.com/file/2020/07/22001f0346a795841eabe8843a7b53afaf111638c9740000897c62d37f14-fa6f930d.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<div style=\"width: 100%\">\n<video width=\"320\" height=\"240\" controls=\"controls\">\n<source src=\"https://b3logfile.com/file/2020/07/e8a41b4cabe342d2bb63f35cc508dff0-08afd5e7.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<div style=\"width: 100%\">\n<video width=\"320\" height=\"240\" controls=\"controls\">\n<source src=\"https://b3logfile.com/file/2020/07/234b231a1a374ae0b30b4b75ec1463fe-8a19b06c.mp4\" type=\"video/mp4\">\n您的浏览器不支持Video标签。\n</video>\n</div>\n\n<table style=\"border: 1px solid gray\">\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1587861259577-605edb30.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1593439142093-9732b865.gif\"/></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1593575722658-b6f7647d.gif\"/></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1592926751030-905a166a.gif\"/> </td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1586599427031-1d16c1ce.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1581131075607-bd9d0d03.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1581684896750-13982fe3.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1585387038130-7bb30722.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1584421489925-9ad2e0cf.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1583487689748-2a4a9819.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1580834608455-a3e42533.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1581864775931-557b9868.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1580612946004-726906e8.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1578373835490-69528dd5.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1578704202362-1dca6234.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1575650818140-1c757119.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1579744845796-b43106bd.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1576817538332-5d2ed833.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1572103026260-f32b8c9a.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1571658966337-3957658c.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1574860994738-ca49cac7.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1572435441923-384cd148.gif\"></td></tr>\n<tr><td><img src=\"https://b3logfile.com/file/2020/07/1572773391669-53378b7f.gif\"></td></tr>\n</table>\n\n</table>\n','/articles/2020/07/19/1595088381996.html','0',1595088382048,1606979478174,0.0008423824187407947,'1','','https://b3logfile.com/file/2020/07/1587861259577-605edb30.gif?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1595473455262','每日英语','\n','what do you want from me! let me show you. son of a bitch. 酸萝卜别吃 look familiar. i surrender. stay with me. let me show you. i\'am trying. calm down. isn\'t it? hurry up! gonna work.','每日英语','1556594816141','what do you want from me!\n\nlet me show you.\n\nson of a bitch. 酸萝卜别吃\n\nlook familiar.\n\ni surrender.\n\nstay with me.\n\nlet me show you.\n\ni\'am trying.\n\ncalm down.\n\nisn\'t it?\n\nhurry up!\n\ngonna work.\n','/articles/2020/07/23/1595473455262.html','1',1595473455318,1598199317287,0.000022853472500861116,'1','','https://img.hacpai.com/bing/20200614.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1595777765184','文字&书法','\n','','行测','1556594816141','![image.png](https://b3logfile.com/file/2020/07/image-e219a21c.png)\n\n![image.png](https://b3logfile.com/file/2020/07/image-3ac5f73e.png)\n\n![image.png](https://b3logfile.com/file/2020/07/image-55ea5ab6.png)\n\n![image.png](https://b3logfile.com/file/2020/07/image-80c35e8c.png)\n\n1. 甲骨文 先秦\n\n商朝占卜记事时刻在龟甲兽骨上的文字，最老且相对成熟的文字\n\n甲骨文之父------王懿荣\n\n《铁云藏龟》----第一部关于记录甲骨文的书籍\n\n2. 金文 先秦\n\n比甲骨文稍晚，镌刻在青铜器上\n\n青铜器上刻录文字最多的是  《毛公鼎》\n\n3. 秦朝\n\n小篆， 宰相李斯负责统一文字。特点是略长，没有棱角\n\n![image.png](https://b3logfile.com/file/2020/07/image-3ab9f817.png)\n\n4. 汉朝\n\n隶书。在篆书的基础上为适应书写便捷产生的字体\n\n特点 ‘蚕头燕尾’ ‘一波三折’\n\n代表人物 ： 蔡邕 ----飞白书\n\n草书。\n\n章草，今草之分\n\n章草是隶书的快写体\n\n**今草由东汉的张芝创立**\n\n5. 魏晋\n\n楷书。\n\n由隶书演变而来的端正的工整的字体\n\n代表人物 钟繇。代表作《宜示表》\n\n行书。\n\n介于楷书与草书之间\n\n代表人物。王羲之 代表作：《兰亭序》 天下第一行书~~~~。有书圣的美誉。相关典故： 入木三分 东床快婿\n\n王献之。《中秋贴》\n\n《三希堂法帖》\n\n6. 唐朝\n\n楷书。 发展到鼎盛时期\n\n代表人物：\n\n欧阳询： 《 》\n\n颜真卿，柳公权：《多宝塔碑》 《玄秘塔碑》\n\n楷书四大家：欧阳询，颜真卿，柳公权，赵孟頫(元代）\n\n草书：\n\n狂草\n\n张旭： 《肚疼贴》，草圣\n\n怀素：与张旭起名，人称“颠张醉素”， 代表作品《自叙帖》\n\n7. 宋朝\n\n北宋四大家：苏轼《寒食帖》天下第三行书，米芾 ‘米点山水’， 黄庭坚 苏轼的学生，蔡襄\n\n宋徽宗，独创瘦金体\n','/articles/2020/07/26/1595777765184.html','0',1595777765297,1596364435922,0.005404975280502766,'1','123456','https://b3logfile.com/file/2020/07/image-e219a21c.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1595864940138','历代画作','\n','','行测,画','1556594816141','1. 东晋\n\n顾恺之 --代表作 《女史箴图》 《洛神赋图（曹植的洛神赋）》\n\n2. 唐代\n   周昉 《簪花仕女图》\n   张轩 《虢国夫人游春图》 《捣练图》\n   阎立本 《历代帝王图》《步辇图》（取材于松赞干布与文成公主联姻，唐太宗李世民）\n   吴道子 《送子天王图》-----画圣\n3. 五代十国\n   顾闳中 《韩熙载夜宴图》\n4. 隋朝\n   展子虔 《游春图（青绿山水画）》 最古老的独立山水画\n5. 唐代（山水画）\n   王维（诗佛） 《雪溪图》**水墨山水画-**---“诗中有画 画中有诗”\n6. 元代\n   黄公望（人生坎坷 做官 坐牢 做道士） 《富春山居图》\n   ![image.png](https://b3logfile.com/file/2020/07/image-3654007e.png)\n7. 明代\n   明四家 沈周，文徽明，唐寅，仇英\n   ![image.png](https://b3logfile.com/file/2020/07/image-298270be.png)\n8. 明末清初\n   石涛，**八大山人（画的画都是白眼? ）**，宏仁皆, _________  {清四僧}\n   ![image.png](https://b3logfile.com/file/2020/07/image-aece86e9.png)\n9. 花鸟画\n   唐代：韩愰 《五牛图》\n   明朝： 虚渭 《墨葡萄图》\n   清代： 郑板桥 《竹石图》“扬州八怪之一”  （最爱画 竹 兰 石）\n10. 风俗画\n    北宋：张择端 《清明上河图》\n11. 近代\n    徐悲鸿：《负伤之狮》 《愚公移山》 《奔马图》\n    张大千： 《庐山图》 《天女散花》\n    傅抱石：《江山如此多娇》《》\n    齐白石： 《墨虾》 《蛙声十里出山泉》\n    ![image.png](https://b3logfile.com/file/2020/07/image-6e941d6b.png)![image.png](https://b3logfile.com/file/2020/07/image-7e706433.png)\n','/articles/2020/07/27/1595864940138.html','0',1595864940242,1596364417423,0.0046196983645039325,'1','123456','https://b3logfile.com/file/2020/07/image-3654007e.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1595946744185','地表形态','\n','','待分类','1556594816141','1. 地壳平均厚度 17km\n2. 氧硅铝 是地壳中含量排在前三位的\n3. 地幔 位于莫霍面与古登堡面之间\n4. 魏格纳  大陆漂移说\n5. 印度洋板块 有阿拉伯半岛，印度，澳大利亚三块陆地\n6. 马里亚纳海沟 地球上最深的地方\n7. 地震分类：\n   构造地震，火山地震，塌陷地震，诱发地震\n8. 三大地震带\n   地中海-喜马拉雅地震带\n   环太平洋地震带\n   海岭地震带\n9. 特殊地貌\n   喀斯特地貌 （西南地区。石灰岩被流水侵蚀）\n   雅丹地貌 （风力侵蚀的）\n   丹霞地貌  （岩石在多种因素的作用下形成，分布：甘肃张掖，广东丹霞山，福建武夷山，贵州赤水）\n10. 岩石类型\n    沉积岩： 石灰岩 页岩\n    岩浆岩：岩浆岩，花岗岩\n    变质岩: 大理岩（高温高压下）\n','/articles/2020/07/28/1595946744185.html','0',1595946744236,1596364381166,0.0006674900589453969,'1','123456','https://img.hacpai.com/bing/20180512.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596031678861','水 空气','\n','','待分类','1556594816141','1. 空气组成\n   氮气（78%），氧气（21%），其他气体\n2. 大气垂直分布\n   对流层（海拔越高温度越低）\n   平流层（海拔升高温度升高 12~55km）\n   中间层（55-85km）\n   热层(85-800km)\n   ![image.png](https://b3logfile.com/file/2020/07/image-7dc6ef36.png)\n3. 大气运动\n   根本原因：太阳辐射能的维度不同\n   直接原因: 水平气压差\n4. 热力环流\n   海陆环流\n   城市环流 （城市与郊区之间）\n5. 水\n   淡水三分之二是冰川水\n6. 降雨类型\n   对流雨（冷暖空气上下对流形成）\n   锋面雨（冷锋，暖风，准静止锋）\n   地形雨\n   台风雨\n   ![image.png](https://b3logfile.com/file/2020/07/image-1748b6cd.png)\n   ![image.png](https://b3logfile.com/file/2020/07/image-9ac168ca.png)\n','/articles/2020/07/29/1596031678861.html','0',1596031678913,1596364366986,0.004440696547332368,'1','123456','https://b3logfile.com/file/2020/07/image-7dc6ef36.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596119248415','地球运动','\n','','行测,地球运动','1556594816141','1. 地球半径\n   5371km\n2. 地轴\n   北极始终朝向北极星\n3. 南极\n   长城，中山，昆山，泰山科考站\n4. 北极\n   黄河站\n5. 回归线\n   南北纬 23.26\n6. 地球自转\n   角速度都一样\n   ![image.png](https://b3logfile.com/file/2020/07/image-d7809855.png)![image.png](https://b3logfile.com/file/2020/07/image-a6df13d4.png)\n   ![image.png](https://b3logfile.com/file/2020/07/image-34bc57c7.png)\n   ![image.png](https://b3logfile.com/file/2020/07/image-a73cde41.png)\n','/articles/2020/07/30/1596119248415.html','0',1596119248518,1596364342515,0.004513926028385962,'1','123456','https://b3logfile.com/file/2020/07/image-d7809855.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596257551654','气候 ','\n','','待分类','1556594816141','1. 天气是一个地区短时间的大气状况\n2. 气候是一个地区多年的平均的天气状况\n3. 影响地球气候的因素：\n   太阳辐射，大气环流，地面状况\n   ![image.png](https://b3logfile.com/file/2020/08/image-998485f3.png)\n4. 气温从赤道到两级是递减的\n5. 温度带\n   温带到热带的过度地区叫做亚热带\n   ![image.png](https://b3logfile.com/file/2020/08/image-9540d305.png)\n6. 降水\n   ![image.png](https://b3logfile.com/file/2020/08/image-5d1be6ac.png)\n7. 气候类型\n   热带气候类型：\n   热带雨林气候（马来群岛，亚马逊热带雨林，几内亚）\n   热带季风气候 （分为明显的旱季和雨季，分布在亚洲南部，印度，越南，老挝，柬埔寨，海南岛）\n   热带草原气候 （降水总体较少，动物从冬天到夏天从赤道南迁移到赤道北）\n   热带沙漠气候（撒哈拉沙漠）\n   ![image.png](https://b3logfile.com/file/2020/08/image-e724f968.png)\n   亚热带气候类型（冬暖夏热）：\n   秦岭淮河以南：亚热带季风气候\n   ~~秦岭淮河以北： 温带季风气候~~\n   地中海气候（雨热不同期）：夏天高压，降雨少。冬天温和降水多\n   ![image.png](https://b3logfile.com/file/2020/08/image-cc1c7301.png)\n   温带：\n   温带季风气候（夏天高温多雨，冬季寒冷干燥。北京）\n   温度海洋气候（受北大西洋暖流影响，全年温和多雨。英国伦敦，北美洲美国西雅图）\n   温带大陆性气候 （分布范围广，温差大，降水少。俄罗斯莫斯科）\n   ![image.png](https://b3logfile.com/file/2020/08/image-601db928.png)\n\n   ![](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2832282371,3801298913&fm=26&gp=0.jpg)\n','/articles/2020/08/01/1596257551654.html','0',1596257551706,1596364332741,0.00017771304576608138,'1','123456','https://b3logfile.com/file/2020/08/image-998485f3.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596271612481','世界地理','\n','','行测','1556594816141','1. 各大洲陆地上的分界线\n   欧洲-亚洲：乌拉尔山 乌拉尔河 高加索山脉\n   亚洲-非洲 ：苏伊士运河，红海\n   南美洲-北美洲: 巴拿马运河\n   亚洲-北美洲：白令海峡\n   欧洲-非洲：地中海，直布罗陀海峡\n2. 主要山脉\n   天山山脉，昆仑山脉，喜马拉雅山脉，阿尔泰山脉\n3. 主要高原\n   青藏高原，蒙古高原，伊朗高原，德干高原\n4. 湖泊\n   最大的咸水湖：里海\n   最深的淡水湖：贝加尔湖\n   ![image.png](https://b3logfile.com/file/2020/08/image-94db92d1.png)\n5. 几内亚湾（非洲）\n   非洲最大的海湾，东南面的马达加斯加是非洲最大的岛屿\n   非洲最高山是乞力马扎罗山\n6. 东非大裂谷\n7. 非洲有尼罗河（世界上最长的河流），刚果河（水能最丰富的的河流）\n8. 维多利亚湖是非洲最大的淡水湖，世界第二大淡水湖\n9. 非洲主要国家：\n   埃及，南非\n   ![image.png](https://b3logfile.com/file/2020/08/image-6ece13d5.png)\n','/articles/2020/08/01/1596271612481.html','0',1596271612533,1596364302507,0.001101734909312868,'1','123456','https://b3logfile.com/file/2020/08/image-94db92d1.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596338434581','统筹管理','\n','','待分类','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-d78c084f.png)\n\n![image.png](https://b3logfile.com/file/2020/08/image-c4d8aaff.png)\n\n![9a359259081e4fb6577f35429eea41b.jpg](https://b3logfile.com/file/2020/08/9a359259081e4fb6577f35429eea41b-d70f51bb.jpg)![7fb0bbc12f1d628d9682c1c1ec03744.jpg](https://b3logfile.com/file/2020/08/7fb0bbc12f1d628d9682c1c1ec03744-b671b43b.jpg)\n','/articles/2020/08/02/1596338434581.html','0',1596338434633,1596364322405,0.00020043543417047616,'1','123456','https://b3logfile.com/file/2020/08/image-d78c084f.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596360977561','货币相关知识','\n','','待分类','1556594816141','贝币-秦半两-五铢钱-开元通宝-交子-白银\n\n![](http://blog.ityousee.com/%E5%90%8E%E5%A3%81%E9%A1%BA%E5%BA%8F.png)\n\n1. 货币的概念\n   货币是从商品中分离出来，固定充当一般等价物的**商品**\n2. 纸币不能叫做货币，只能叫货币符号\n3. 货币的职能\n   价值尺度，流通手段，支付手段，贮藏手段，世界货币（是货币在国际市场上充当一般等价物的zhineng）\n   ![](http://blog.ityousee.com/%E6%B5%81%E9%80%9A%E6%94%AF%E4%BB%98%E6%89%8B%E6%AE%B5.png)\n\n   ![](http://blog.ityousee.com/%E8%B4%A7%E5%B8%81.png)\n4. 通货膨胀含义\n   流通中的货币数量超过经济实际需要而引起的货币贬值和物价水平全面而持续的上涨\n5. 通货膨胀的因素\n\n   * 货币数量论\n     央行发行的货币多了\n   * 需求拉动论\n     社会的总需求大于社会的总供给\n   * 成本推动论\n     供给方的成本增加\n6. 通货膨胀对储蓄者是不理的\n7. 通货膨胀率高的时候 失业率低\n   ![](http://blog.ityousee.com/%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80.png)\n8. 汇率制度\n   中国是有管理的浮动汇率制\n   ![image.png](https://b3logfile.com/file/2020/08/image-2db5d5f8.png)\n9. 汇率对进出口的关系\n   ![](http://blog.ityousee.com/%E6%B1%87%E7%8E%87.png)\n   ![](http://blog.ityousee.com/%E4%BA%BA%E6%B0%91%E5%B8%81%E8%B4%AC%E5%80%BC.png)\n10. 汇率与物价的关系\n    当某个东西需要依赖进口，人民币贬值，意味着需要花费更多的钱去购买进口商品，反映到物价上面就是物价上涨\n    ![](http://blog.ityousee.com/%E6%B1%87%E7%8E%87%E6%B1%87%E6%80%BB.png)\n11. 出口大于进口叫做贸易顺差\n','/articles/2020/08/02/1596360977561.html','0',1596360977613,1596364557279,0.001865934187748719,'1','123456','http://blog.ityousee.com/%E5%90%8E%E5%A3%81%E9%A1%BA%E5%BA%8F.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596382727444','每日练字2020年8月2日','\n','','每日练字','1556594816141','![](http://blog.ityousee.com/%E7%BB%83%E5%AD%97080202.jpg)\n![](http://blog.ityousee.com/%E7%BB%83%E5%AD%97080201.jpg)\n','/articles/2020/08/02/1596382727444.html','0',1596382727546,1596382727546,0.003725398129093782,'2','','http://blog.ityousee.com/%E7%BB%83%E5%AD%97080202.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596460633066','中国历代人物','\n','','待分类','1556594816141','1. 先秦\n   舜--孝感天地\n   禹--三顾家门而不入 建夏\n   商汤--鸣条之战\n   周文王：西伯举而演周易\n   周武王： 武王伐纣-牧野之战\n   周幽王：烽火戏诸侯\n   姜尚：姜子牙 ，百家宗师，六韬\n   春秋五霸：齐桓公（春秋五霸之首），晋文公，楚庄王（问鼎中原，一鸣惊人），吴王阖闾，越王勾践（卧薪尝胆）\n   管仲：尊王攘夷，老马识途，管鲍之交\n   范蠡（辅助越王勾践灭吴）：兔死狗烹，商圣，西施\n   伍子胥：一夜白发，倒行逆施（违反常理，不择手段），年糕\n   秦孝公：商鞅变法\n   商鞅：立木为信\n   孙膑（围魏救赵），庞涓：孙庞斗智\n   孙秦，张仪：合纵连横（悬梁，东汉苏敬，刺股 张秦）\n   蔺相如（廉颇）：负荆请罪，完璧归赵，绳池之会\n   白起：战神，长平之战\n   范睢：睚眦必报，远交近攻，固干削枝\n   吕不韦：（吕氏春秋）一字千金\n   季布：一诺千金\n   荆轲：图穷匕见\n   ![](http://blog.ityousee.com/%E5%85%88%E7%A7%A6%E5%8E%86%E4%BB%A3%E4%BA%BA%E7%89%A9.png)\n\n   ![](http://blog.ityousee.com/%E5%8F%A4%E4%BB%A3%E9%87%8D%E8%A6%81%E6%94%B9%E9%9D%A9.png)\n2. 秦汉\n   嬴政：统一六国\n   赵高：指鹿为马\n   项羽：破釜沉舟，力能扛鼎，四面楚歌\n   刘邦：约法三章，建西汉\n   萧何：萧规曹随\n   张良：博浪沙刺秦，孺子可教\n   韩信：一饭千金，胯下之辱，背水一战，十面埋伏，多多益善\n   汉文帝，汉景帝：文景之治\n   刘彻（汉武帝）：北极匈奴，独尊儒术，盐铁官营，巫蛊之祸，金屋藏娇\n   司马迁:史记\n   张骞：开辟西域\n   **主父偃：推恩令**\n   刘秀：昆阳之战，**建东汉**，光武中兴\n   马援：马革裹尸，**老当益壮**\n   班超：投笔从戎，**不入虎穴焉得虎子**\n   ![](http://blog.ityousee.com/%E5%8F%A4%E4%BB%A3%E5%8F%B2%E4%B9%A6.png)\n3. 三国两晋南北朝\n   曹操：官渡之战，赤壁之战，奸雄，望梅止渴\n   曹丕：建魏\n   刘备：三顾茅庐，建蜀汉\n   刘禅：乐不思蜀\n   关羽：斩颜良，单刀赴会，水淹七军，败走麦城\n   诸葛亮：鞠躬尽瘁，**平孟获，北伐，八阵图**\n   孙权：建吴\n   周瑜：赤壁之战，**羽扇纶巾**\n   吕蒙：**刮目相看**\n   陆逊：火烧连营\n   司马炎：建西晋\n   司马睿：建东晋\n   谢安：**淝水之战**，东山再起\n   祖逖（东晋名将）：闻鸡起舞，中流击楫\n   刘琨：枕戈待旦\n   **北魏孝文帝：汉化改革，迁都洛阳**\n   郦道元：水经注\n   ![](http://blog.ityousee.com/%E5%8F%A4%E4%BB%A3%E9%83%BD%E5%9F%8E.png)\n','/articles/2020/08/03/1596460633066.html','0',1596460633119,1596465933577,0.00030836958128099834,'1','123456','http://blog.ityousee.com/%E5%85%88%E7%A7%A6%E5%8E%86%E4%BB%A3%E4%BA%BA%E7%89%A9.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596470957440','每日练字2020年8月4日','\n','','每日练字','1556594816141','![](http://blog.ityousee.com/%E6%AF%8F%E6%97%A5%E7%BB%83%E5%AD%9720200804.jpg)\n','/articles/2020/08/04/1596470957440.html','0',1596470957492,1596470957492,0.0014188280223558225,'1','','http://blog.ityousee.com/%E6%AF%8F%E6%97%A5%E7%BB%83%E5%AD%9720200804.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596641885653','每日练字2020年8月5日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-88c01d84.png)\n','/articles/2020/08/05/1596641885653.html','0',1596641885705,1596641885705,0.0049488215674794445,'1','','https://b3logfile.com/file/2020/08/image-88c01d84.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596730122149','每日练字2020年8月7日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-1eda0d22.png)\n','/articles/2020/08/07/1596730122149.html','0',1596730122201,1596730122201,0.006021395497482374,'1','','https://b3logfile.com/file/2020/08/image-1eda0d22.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596818250484','每日练字2020年8月8日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-f6536a68.png)\n','/articles/2020/08/08/1596818250484.html','0',1596818250536,1596818250536,0.0004961202893364325,'1','','https://b3logfile.com/file/2020/08/image-f6536a68.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1596988456366','每日练字2020年8月9日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-4c914ee2.png)\n','/articles/2020/08/09/1596988456366.html','0',1596988456418,1596988456418,0.0008057115740777165,'1','','https://b3logfile.com/file/2020/08/image-4c914ee2.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1597161345449','每日练字2020年8月11日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-fd12c257.png)\n','/articles/2020/08/11/1597161345449.html','0',1597161345501,1597161345501,0.002077996208149302,'1','','https://b3logfile.com/file/2020/08/image-fd12c257.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1597515723604','每日练字2020年8月15日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-d65be394.png)\n','/articles/2020/08/16/1597515723604.html','0',1597515723655,1597515723655,0.00430242937975156,'1','','https://b3logfile.com/file/2020/08/image-d65be394.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1597580375945','世界史','\n','','待分类','1556594816141','1. 世界古文明\n   1. 古埃及\n      位于非洲东北部尼罗河中下游地区。\n      文字为圣书体\n      文化符号：金字塔 狮身人面像 木乃伊\n   2. 古巴比伦\n      位于美索不达亚平原\n      楔形文字\n      《汉谟拉比法典》世界上第一部比较完备的成文法典\n      文化符号：空中花园\n   3. 古印度\n      两大史诗 《摩诃婆罗多》《罗摩耶那》\n      阿拉伯数字起源于印度\n      种姓制度：婆罗门 刹帝利 吠舍 首陀罗\n      文化符号：阿育王石柱\n      ![image.png](https://b3logfile.com/file/2020/08/image-125f0800.png)\n   4. 古希腊\n      斯巴达~~~~\n      西方文明的主要源头之一\n      荷马史诗 是有古希腊盲人诗人荷马创作的两篇长篇史诗 《伊利亚特》《奥德赛》\n      亚历山大帝国\n      古希腊雅典城西南与有一块丘陵叫奥利匹亚村，是奥利匹克运动诞生地\n      古希腊三杰：苏格拉底 柏拉图 亚里士多德（吾爱吾师更爱真理）\n   5. 古罗马\n      凯撒\n      公元前27年，屋大维独揽国家政权，成为罗马帝国的第一个统治者，罗马由共和国转为帝国，公元2世纪，古罗马成为地跨亚欧非三大洲帝国\n      395年，罗马帝国分裂为东西两部分，476年西罗马帝国北日耳曼人所灭，东罗马帝国一直延续到1453年，北奥斯曼帝国所灭\n      法律：\n      《十二铜表法》是古罗马第一步成文法典\n      《国法大全》标志着罗马法已发展到最发达完备的阶段\n   6. ![image.png](https://b3logfile.com/file/2020/08/image-815088f0.png)\n   7. 宗教\n      ![image.png](https://b3logfile.com/file/2020/08/image-c56c6a36.png)\n2. 新航路的开辟，文艺复兴和启蒙运动\n   迪亚士，哥伦布，达。伽马 麦哲伦\n   ![image.png](https://b3logfile.com/file/2020/08/image-d17a0334.png)\n   1. 文艺复兴\n      发生在十四 至十六世纪的文化运动，在中世纪晚期发源于佛罗伦萨，后扩展至欧洲各国\n      核心内容：\n      人文主义精神，提倡人性，反对神性。提倡个性解放，反对愚昧迷信的神学思想。\n      代表人物：\n      文学三界：但丁，比特拉克，薄伽丘\n      美术三杰：达芬奇，拉斐尔，米开朗基罗\n3. 启蒙运动\n   17，18世纪欧洲的一场反封建，反教会的思想文化解放运动\n   法国是启蒙运动的中心，法国启蒙运动领袖是伏尔泰\n   代表人物：\n   孟德斯鸠《论法的精神》\n   卢梭《社会契约论》\n   ![image.png](https://b3logfile.com/file/2020/08/image-4915b38d.png)\n4. 各国革命\n   1. 英国革命\n      光荣革命标志着英国革命的结束\n      1689年通过的《权利法案》建立了君主立宪制政体，确立了资本主义制度在英国的统治\n   2. 美国革命\n      美国独立战争\n   3. 法国大革命\n      人权宣言\n      七月革命\n      历时41年\n      拿破仑\n   4. 十月革命\n      1917年11月7日\n      列宁和托洛斯基\n      第一次胜利的社会主义革命，建立了第一个无产阶级领导的社会主义国家\n      ![image.png](https://b3logfile.com/file/2020/08/image-e6bac6d0.png)\n5. 工业革命\n   ![image.png](https://b3logfile.com/file/2020/08/image-5b74aaf9.png)\n','/articles/2020/08/16/1597580375945.html','0',1597580375997,1597586882792,0.0000007683589579032812,'1','123456','https://b3logfile.com/file/2020/08/image-125f0800.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1597591639675','每日练字2020年8月16日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-b1541445.png)\n','/articles/2020/08/16/1597591639675.html','0',1597591639727,1597591639727,0.005461121710600314,'1','123456','https://b3logfile.com/file/2020/08/image-b1541445.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1597631658876','linux tc命令','\n','1.模拟网络延迟 将 eth0 网卡的传输设置为延迟 100 毫秒发送 tc qdisc add dev eth0 root netem delay 100ms 将 eth0 网卡的传输设置为延迟 100ms ± 10ms (90 ~ 110 ms 之间的任意值)发送 tc qdisc add dev eth0 root netem delay 100ms 10ms 将 eth0 网卡的传输设置为 100ms ,同时,大约有 30% 的包会延迟 ± 10ms 发送 tc qdisc add dev eth0 root netem delay 100ms 10ms 30% 2、模拟网络丢包 将 eth0 网卡的传输设置为随机丢掉 1% 的数据包  tc qdisc add dev eth0 root netem loss 1% 将 eth0 网卡的传输设置为随机丢掉 1% 的数据包,成功率为 30% tc qdisc add dev eth0 root netem loss 1% 30% 3、模拟包重复 将 eth0 网卡的传输设置为随机产生 1% 的重复数据包 tc qdisc add....','linux','1556594816141','#### 1.模拟网络延迟\n\n将 eth0 网卡的传输设置为延迟 100 毫秒发送\n\ntc qdisc add dev eth0 root netem delay 100ms\n\n将 eth0 网卡的传输设置为延迟 100ms ± 10ms (90 ~ 110 ms 之间的任意值)发送\n\n<pre>tc qdisc add dev eth0 root netem delay 100ms 10ms</pre>\n\n将 eth0 网卡的传输设置为 100ms ,同时,大约有 30% 的包会延迟 ± 10ms 发送\n\n<pre>tc qdisc add dev eth0 root netem delay 100ms 10ms <span>30</span>%</pre>\n\n#### 2、模拟网络丢包\n\n将 eth0 网卡的传输设置为随机丢掉 1% 的数据包\n\n<pre> tc qdisc add dev eth0 root netem loss <span>1</span>%</pre>\n\n将 eth0 网卡的传输设置为随机丢掉 1% 的数据包,成功率为 30%\n\n<pre>tc qdisc add dev eth0 root netem loss <span>1</span>% <span>30</span>%</pre>\n\n#### 3、模拟包重复\n\n将 eth0 网卡的传输设置为随机产生 1% 的重复数据包\n\n<pre>tc qdisc add dev eth0 root netem duplicate <span>1</span>%</pre>\n\n#### 4、模拟数据包损坏\n\n将 eth0 网卡的传输设置为随机产生 0.2% 的损坏的数据包\n\n<pre>tc qdisc add dev eth0 root netem corrupt <span>0.2</span>%</pre>\n\n#### 5、模拟包乱序\n\n将 eth0 网卡的传输设置为:有 25% 的数据包(50%相关)会被立即发送,其他的延迟10 毫秒。\n\n<pre>tc qdisc change dev eth0 root netem delay 10ms reorder <span>25</span>% <span>50</span>%</pre>\n','/articles/2020/08/17/1597631658876.html','0',1597631658928,1597631658928,0.0005503841975843526,'1','','https://img.hacpai.com/bing/20191128.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1597938904204','每日练字2020年8月20日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-a1d81188.png)\n','/articles/2020/08/20/1597938904204.html','0',1597938904255,1597938904255,0.002974410843536668,'1','','https://b3logfile.com/file/2020/08/image-a1d81188.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1598199031563','每日练字2020年8月24日','\n','','每日练字','1556594816141','![image.png](https://b3logfile.com/file/2020/08/image-90e51fff.png)\n','/articles/2020/08/24/1598199031563.html','0',1598199031615,1598199031615,0.00156803129406069,'1','','https://b3logfile.com/file/2020/08/image-90e51fff.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1598948074188','centos使用阿里云的源','\n','备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup   下载阿里云的CentOS-Base.repo 到/etc/yum.repos.d/ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo   清理缓存 yum clean all   生成新的缓存 yum makecache','linux','1556594816141','1. 备份\n   ```\n   mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n   ```\n2. 下载阿里云的CentOS-Base.repo 到/etc/yum.repos.d/\n   ```\n   wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n   或者\n\n   curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n   ```\n3. 清理缓存\n   ```\n   yum clean all\n   ```\n4. 生成新的缓存\n   ```\n   yum makecache\n   ```\n','/articles/2020/09/01/1598948074188.html','0',1598948074244,1598948074244,0.0010114155393049495,'1','','https://img.hacpai.com/bing/20200518.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599573926412','言语理解与表达-中心理解','\n','','言语','1556594816141','1. 重点词汇\n   关联词：转折 ， 因果， 必要条件（只有...才...）\n   主题词\n   程度词\n2. 必要条件\n   ![image.png](https://b3logfile.com/file/2020/09/image-42d106e6.png)\n   ![image.png](https://b3logfile.com/file/2020/09/image-76c95933.png)\n\n   1. 解决问题的的对策最重要，提出问题，解决问题，解决问题才是重点\n   2. 反面论证：把错误的论证反过来就是正确的答案\n3. 程度词\n\n   更，尤其，正是，特别是，真正，根本，最\n4. 并列关系\n   ![image.png](https://b3logfile.com/file/2020/09/image-6f80dd71.png)\n','/articles/2020/09/08/1599573926412.html','0',1599573926514,1599580087726,0.0026329712975622366,'1','123456','https://b3logfile.com/file/2020/09/image-42d106e6.png?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1599620870505','vue watch深度监听','\n','父组件向子组件传对象时,不能监听传过来的对象的变化. 深度观察模式，这种模式能够监听所观察对象中每一个属性的变化，但因为需要层层递归所以性能也稍微有减弱，如果需要第一次创建组件就立即得到计算，还可以设置 watch: { paramData: { handler(newVal, oldVal) { console.log(newVal) }, deep: true, immediate: true } }','vue','1556594816141','父组件向子组件传对象时,不能监听传过来的对象的变化.\n深度观察模式，这种模式能够监听所观察对象中每一个属性的变化，但因为需要层层递归所以性能也稍微有减弱，如果需要第一次创建组件就立即得到计算，还可以设置\n```\nwatch: {\n	paramData: {\n		handler(newVal, oldVal) {\n			console.log(newVal)\n		},\n		deep: true,\n		immediate: true\n	}\n}\n```\n','/articles/2020/09/09/1599620870505.html','0',1599620870558,1599620870558,0.0013738939032101882,'1','','https://img.hacpai.com/bing/20190929.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599623436262','element ui table表头自定义按钮点击事件','\n','&lt;el-table-column :render-header=\"renderHeader\" width=\"200\"&gt; &lt;/el-table-column&gt; methods: { renderHeader() { return ( &lt;label style=\"cursor: pointer;color: green\" on-click={()=&gt;this.add()}&gt; 点此添加 &lt;/label&gt; ) } }','vue','1556594816141','```\n\n<el-table-column\n       :render-header=\"renderHeader\"\n       width=\"200\">\n     </el-table-column>\n\n\nmethods: {\n      renderHeader() {\n        return (\n          <label style=\"cursor: pointer;color: green\" on-click={()=>this.add()}>\n            点此添加\n          </label>\n        )\n      }\n}\n```\n','/articles/2020/09/09/1599623436262.html','0',1599623436314,1599623436314,0.0011099661479158085,'1','','https://img.hacpai.com/bing/20190825.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599623898589','element-ui 表格可编辑添加删除','\n','将该功能定义为一个组件 使用以下方式引入;@upval是子组件向父组件传递表格中的值,值为数组类型;routeList是父组件向子组件传的值,子组件用props接收,目的是为了初始化子组件表格的数据;  &lt;bond-route @upval=\"setBondRoute\" :routeList=\"form.routeList\"&gt;&lt;/bond-route&gt;  &lt;template&gt; &lt;div&gt; &lt;el-table :data=\"bondRoute.data\" border style=\"margin:auto\" highlight-current-row &gt; &lt;!-- &lt;el-table-column type=\"index\"&gt;&lt;/el-table-column&gt;--&gt; &lt;el-table-column v-for=\"(item,index) in bondRoute.columns\" :label=\"item.label\" :prop=\"item.prop\" :key=\"index\" &g....','vue','1556594816141','1. 将该功能定义为一个组件\n2. 使用以下方式引入;@upval是子组件向父组件传递表格中的值,值为数组类型;routeList是父组件向子组件传的值,子组件用props接收,目的是为了初始化子组件表格的数据;\n```\n<bond-route @upval=\"setBondRoute\" :routeList=\"form.routeList\"></bond-route>\n```\n```\n<template>\n  <div>\n    <el-table\n      :data=\"bondRoute.data\"\n      border\n      style=\"margin:auto\"\n      highlight-current-row\n    >\n<!--      <el-table-column type=\"index\"></el-table-column>-->\n      <el-table-column\n        v-for=\"(item,index) in bondRoute.columns\"\n        :label=\"item.label\"\n        :prop=\"item.prop\"\n        :key=\"index\"\n      >\n        <template slot-scope=\"scope\">\n                <span v-if=\"scope.row.isSet\">\n                  <el-input placeholder=\"请输入内容\" v-bind:title=\"bondRoute.sel[item.prop]\" v-model=\"bondRoute.sel[item.prop]\"></el-input>\n                </span>\n          <span v-else>{{scope.row[item.prop]}}</span>\n        </template>\n      </el-table-column>\n      <el-table-column style=\"margin: 0 auto\" :render-header=\"renderHeader\" >\n        <template slot-scope=\"scope\">\n                          <span\n                            class=\"common_desc_txt\"\n                            @click.stop=\"saveRow(scope.row,scope.$index)\"\n                          >保存</span>\n                        <span\n                          class=\"common_desc_txt\"\n                          @click=\"editRow(scope.row,scope.$index)\"\n                        >编辑</span>\n          <span\n            class=\"common_drop_txt\"\n            @click=\"deleteRow(scope.$index,bondRoute.data)\"\n          >删除</span>\n        </template>\n      </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: \"bondRoute\",\n    data() {\n      return {\n        bondRoute: {\n          sel: null, //选中行\n          columns: [\n\n            {\n              prop: \"dest\",\n              label: \"目标地址\",\n            },\n            {\n              prop: \"netmask\",\n              label: \"子网掩码\",\n            },\n            {\n              prop: \"gateway\",\n              label: \"网关地址\",\n            }\n          ],\n          data: []\n        }\n      }\n    },\n    methods: {\n      renderHeader() {\n        return (\n          <label style=\"cursor: pointer;color: green\" on-click={()=>this.add()}>\n            点此添加\n          </label>\n        )\n      },\n      //基本输入列表\n      add() {\n        for (let i of this.bondRoute.data) {\n          if (i.isSet) return this.$message.error(\"请先保存当前编辑项\");\n        }\n        let j = {\n          index: \'\',\n          dest: \'\',\n          netmask: \'\',\n          gateway: \'\',\n          isSet: true\n        };\n        this.bondRoute.data.push(j);\n        this.bondRoute.sel = JSON.parse(JSON.stringify(j));\n      },\n      saveRow(row, index) {\n        let data = JSON.parse(JSON.stringify(this.bondRoute.sel));\n        let destPattern = /^([1-9]|[1-9]\\d|1\\d{2}|2[0-1]\\d|22[0-3])((\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3})$/\n        let gatewayPattern = /^([1-9]|[1-9]\\d|1\\d{2}|2[0-1]\\d|22[0-3])((\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3})$/\n        let netmaskPattern = /(254|252|248|240|224|192|128|0)\\.0\\.0\\.0|255\\.(254|252|248|240|224|192|128|0)\\.0\\.0|255\\.255\\.(254|252|248|240|224|192|128|0)\\.0|255\\.255\\.255\\.(254|252|248|240|224|192|128|0)/\n        if (!destPattern.test(data.dest)) {\n          return this.$message.error(\"请输入正确的目标地址\");\n        }\n        if (!netmaskPattern.test(data.netmask)) {\n          return this.$message.error(\"请输入正确子网掩码\");\n        }\n        if (!gatewayPattern.test(data.gateway)) {\n          return this.$message.error(\"请输入正确的网关地址\");\n        }\n        for (let k in data) {\n          row[k] = data[k];\n        }\n        row.isSet = false;\n        this.$emit(\'upval\', this.bondRoute.data)\n      },\n      editRow(row) {\n        for (let i of this.bondRoute.data) {\n          if (i.isSet) return this.$message.error(\"请先保存当前编辑项\");\n        }\n        this.bondRoute.sel = row;\n        row.isSet = true;\n      },\n      deleteRow(index, rows) {\n        rows.splice(index, 1);\n      },\n      // components: {}\n    },\n    watch: {\n      routeList: {\n        handler(n, o) {\n          if (n !== undefined){\n            this.bondRoute.data = JSON.parse(JSON.stringify(n))\n          }\n          // console.log(\'routeList\' + JSON.stringify(this.bondRoute.data))\n        },\n        deep: true,\n        immediate: true\n      }\n    },\n    props: {\n      routeList: Array\n    },\n  }\n</script>\n\n<style scoped>\n\n</style>\n\n```\n','/articles/2020/09/09/1599623898589.html','0',1599623898641,1599623898641,0.0015779366825616759,'1','','https://img.hacpai.com/bing/20180708.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599639802888','4G/5G与网络模型的关系','\n','4G/5G协议位于物理层和数据链路层.。 4G/5G就像是高速公路，代表是硬件实力，而TCP/IP则代表软件实力。','计算机网络','1556594816141','4G/5G协议位于物理层和数据链路层.。\n4G/5G就像是高速公路，代表是硬件实力，而TCP/IP则代表软件实力。\n','/articles/2020/09/09/1599639802888.html','0',1599639802990,1599639802990,0.0012233156483090202,'1','','https://img.hacpai.com/bing/20191119.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599706260190','linux stress工具','\n','stress 是一个 Linux 系统压力测试工具   安装 yum install -y epel-release yum install -y stress    模拟一个cpu负载100% $ stress --cpu 1 --timeout 600    模拟io压力 stress -i 1 --timeout 600','linux','1556594816141','**stress 是一个 Linux 系统压力测试工具**\n\n1. 安装\n   \n   ```\n   yum install -y epel-release\n   yum install -y stress\n   ```\n2. 模拟一个cpu负载100%\n   \n   ```\n   $ stress --cpu 1 --timeout 600\n   ```\n3. 模拟io压力\n   \n   ```\n   stress -i 1 --timeout 600\n   ```\n\n','/articles/2020/09/10/1599706260190.html','0',1599706260242,1599706934951,0.0014574173088093278,'1','','https://b3logfile.com/bing/20180908.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599706890321','linux sysstat工具','\n','sysstat 包含了常用的 Linux 性能工具，用来监控和分析系统的性能   mpstat工具 是一个常用的多核 CPU 性能分析工具，用来实时查看每个 CPU 的性能指标，以及所有 CPU 的平均指标      pidstat工具 是一个常用的进程性能分析工具，用来实时查看进程的 CPU、内存、I/O 以及上下文切换等性能指标   iostat工具 硬盘IO性能分析工具 iostat -x 1 rrqm/s: 每秒进行 merge 的读操作数目。即 delta(rmerge)/s wrqm/s: 每秒进行 merge 的写操作数目。即 delta(wmerge)/s r/s: 每秒完成的读 I/O 设备次数。即 delta(rio)/s w/s: 每秒完成的写 I/O 设备次数。即 delta(wio)/s rsec/s: 每秒读扇区数。即 delta(rsect)/s wsec/s: 每秒写扇区数。即 delta(wsect)/s rkB/s: 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算) wkB/s: 每秒写K字节数。是 wsect/s....','linux','1556594816141','**sysstat 包含了常用的 Linux 性能工具，用来监控和分析系统的性能**\n\n1. mpstat工具\n   是一个常用的多核 CPU 性能分析工具，用来实时查看每个 CPU 的性能指标，以及所有 CPU 的平均指标\n   \n   1) \n2. pidstat工具\n   是一个常用的进程性能分析工具，用来实时查看进程的 CPU、内存、I/O 以及上下文切换等性能指标\n3. iostat工具\n   硬盘IO性能分析工具\n   \n   ```\n   iostat -x 1\n   rrqm/s:          每秒进行 merge 的读操作数目。即 delta(rmerge)/s\n   wrqm/s:         每秒进行 merge 的写操作数目。即 delta(wmerge)/s\n   r/s:            每秒完成的读 I/O 设备次数。即 delta(rio)/s\n   w/s:            每秒完成的写 I/O 设备次数。即 delta(wio)/s\n   rsec/s:         每秒读扇区数。即 delta(rsect)/s\n   wsec/s:         每秒写扇区数。即 delta(wsect)/s\n   rkB/s:          每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)\n   wkB/s:          每秒写K字节数。是 wsect/s 的一半。(需要计算)\n   avgrq-sz:       平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)\n   avgqu-sz:       平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。\n   await:          平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)\n   svctm:          平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)\n   %util:          一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)\n   ```\n\n\n','/articles/2020/09/10/1599706890321.html','0',1599706890373,1599709959160,0.0005869109997643784,'1','','https://b3logfile.com/bing/20180430.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599711857903','查看linux CPU核数','\n','CPU总核数 = 物理CPU个数 * 每颗物理CPU的核数 总逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数 查看CPU信息（型号） [root@AAA ~]# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 24 Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz # 查看物理CPU个数 [root@AAA ~]# cat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l 2 # 查看每个物理CPU中core的个数(即核数) [root@AAA ~]# cat /proc/cpuinfo| grep \"cpu cores\"| uniq cpu cores : 6 # 查看逻辑CPU的个数 [root@AAA ~]# cat /proc/cpuinfo| grep \"processor\"| wc -l 24  这些都代表什么，那就请看CPU架构 多个物理CPU，CPU通过总线进行通信，效率比较低，如下：  多核CPU....','linux','1556594816141','```\nCPU总核数 = 物理CPU个数 * 每颗物理CPU的核数 \n总逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数\n\n\n查看CPU信息（型号）\n[root@AAA ~]# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n     24         Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz\n\n# 查看物理CPU个数\n[root@AAA ~]# cat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l\n2\n\n# 查看每个物理CPU中core的个数(即核数)\n[root@AAA ~]# cat /proc/cpuinfo| grep \"cpu cores\"| uniq\ncpu cores    : 6\n\n# 查看逻辑CPU的个数\n[root@AAA ~]# cat /proc/cpuinfo| grep \"processor\"| wc -l\n24\n```\n\n这些都代表什么，那就请看CPU架构\n\n多个物理CPU，CPU通过总线进行通信，效率比较低，如下：\n\n![](https://b3logfile.com/file/2020/09/solofetchupload1301817196320477365-dc60fe1a.jpeg)\n\n多核CPU，不同的核通过L2 cache进行通信，存储和外设通过总线与CPU通信，如下：\n\n![](https://b3logfile.com/file/2020/09/solofetchupload8852813997746937274-cecf35ff.jpeg)\n\n多核超线程,每个核有两个逻辑的处理单元，两个核共同分享一个核的资源，如下：\n\n![](https://b3logfile.com/file/2020/09/solofetchupload6482447598443937919-750381d9.jpeg)\n\n从上面执行的结果来看，证明我使用的cpu有2 * 6 = 12核，每个核有2个超线程，所以有24个逻辑cpu。\n\n\n> 原文链接:[ https://www.cnblogs.com/bugutian/p/6138880.html](https://)\n\n','/articles/2020/09/10/1599711857903.html','0',1599711857955,1599711857955,0.0003286509756726952,'1','','https://b3logfile.com/file/2020/09/solofetchupload1301817196320477365-dc60fe1a.jpeg?imageView2/2/w/1280/format/jpg/interlace/1/q/100',0),('1599724495911','linux 文件描述符','\n','系统最大打开文件描述符数 $ cat /proc/sys/fs/file-max    修改系统最大文件描述符数 临时修改： $ echo 1000000 &gt; /pro/sys/fs/file-max 永久修改：在配置文件/etc/sysctl.conf中设置 fs.file-max = 1000000    进程最多打开文件描述符数 ulimit -n    修改进程最大文件描述符数 临时修改：通过ulimit -Sn设置最大打开文件描述符的soft limit，注意soft limit 不能大于 hard limit(ulimit -Hn可查看hard limit),另外ulimit-n默认查看的是soft limit，但是ulimit -n 180000则是同时设置foft limit和hard limit。对于非root 用户只能设置比原来小的hard limit。 A：查看hard limit：$ ulimit -Hn B：设置soft limit,必须小于hard limit: $ ulimit -Sn 160000 永久修改：上面的方法只是临时性的，注销重新登录就失....','linux','1556594816141','1. 系统最大打开文件描述符数\n   \n   ```\n   $ cat /proc/sys/fs/file-max\n   ```\n2. 修改系统最大文件描述符数\n   \n   ```\n   临时修改： $ echo 1000000 > /pro/sys/fs/file-max\n   \n   永久修改：在配置文件/etc/sysctl.conf中设置\n   \n   fs.file-max = 1000000\n   ```\n3. 进程最多打开文件描述符数\n   \n   ```\n   ulimit -n\n   ```\n4. 修改进程最大文件描述符数\n   \n   ```\n   临时修改：通过ulimit -Sn设置最大打开文件描述符的soft limit，注意soft limit 不能大于 hard limit(ulimit -Hn可查看hard                                    limit),另外ulimit-n默认查看的是soft limit，但是ulimit -n 180000则是同时设置foft limit和hard limit。对于非root                                用户只能设置比原来小的hard limit。\n   \n           A：查看hard limit：$ ulimit -Hn\n   \n           B：设置soft limit,必须小于hard limit:\n   \n                       $ ulimit -Sn 160000\n   永久修改：上面的方法只是临时性的，注销重新登录就失效了，而且不能增大hard limit，只能在hard limit范围内修改soft    limit，若要永久修改，则需要在/etc/security/limits.conf中进行设置（root用户），可添加如下两行，表示所有 用户最大打开文件描述符数的soft limit为102400，hard limit为1040800.一下设置需要注销之后重新登录才能生效：\n   在etc/security/limits.conf中添加如下内容：\n   soft nofile 102400\n   hard nofile 104800\n   注意：设置nofile的hard limit还要注意一点的就是hard limit不能大于/proc/sys/fs/nr_open，加入hard大于nr_open，注销后将无法正常登陆。\n   可以修改nr_open的值：# echo 200000 > /pro/sys/fs/nr_open\n   ```\n5. 查看当前系统使用的打开文件符数\n   \n   ```\n   cat /proc/sys/fs/file-nr\n   5664 0 186405\n   第一个数表示当前系统已分配使用的打开文件描述符数，第二个数为分配后已释放的（目前已不再使用），第三个数等于 file-max\n   ```\n6. 查看进程打开的文件句柄数\n   \n   ```\n   lsof -n|awk \'{print $2}\'|sort|uniq -c |sort -nr|more\n   使用句柄数  进程ID\n   131              24204\n   57                24244\n   57                24231\n   56                2426\n   ```\n\n> 原文地址: [https://blog.csdn.net/qq_15742255/article/details/89226656](https://)\n\n\n\n\n\n\n\n','/articles/2020/09/10/1599724495911.html','0',1599724495963,1599724495963,0.00020150875554469927,'1','','https://b3logfile.com/bing/20200905.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1599749202791','言语理解-语句表达','\n','','言语','1556594816141','1. 语句排序\n   1. 对比确定首句\n      1. 下定义\n      2. 背景引入\n   2. 捆绑（指代词，关联词）\n      1. 关联词\n         当有并列关联词时，下面的解释一定是按照顺序解释的\n   3. 顺序（时间，逻辑）\n   4. ![image.png](https://b3logfile.com/file/2020/09/image-3f11d0a3.png)\n2. 语句填空\n   1. 总分结构\n   2. 分总结构\n   3. ![image.png](https://b3logfile.com/file/2020/09/image-5ae2f4a0.png)\n','/articles/2020/09/10/1599749202791.html','0',1599749202843,1600008048022,0.0030145697084217327,'1','123456','https://b3logfile.com/file/2020/09/image-3f11d0a3.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100',1),('1599811327623','linux lsof命令','\n','lsof命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回/恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。 在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。   参数 -a：列出打开文件存在的进程； -c&lt;进程名&gt;：列出指定进程所打开的文件； -g：列出GID号进程详情； -d&lt;文件号&gt;：列出占用该文件号的进程； +d&lt;目录&gt;：列出目录下被打开的文件； +D&lt;目录&gt;：递归列出目录下被打开的文件； -n&lt;目录&gt;：列出使用NFS的文件； -i&lt;条件&gt;：列出符合条件的进程。（4、6、协议、:端口、 @ip ） -p&lt;进程号&gt;：列出指定进程号所打开的文件；....','linux','1556594816141','lsof命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回/恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。\n在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。\n\n1. 参数\n\n   ```\n   -a：列出打开文件存在的进程；\n   -c<进程名>：列出指定进程所打开的文件；\n   -g：列出GID号进程详情；\n   -d<文件号>：列出占用该文件号的进程；\n   +d<目录>：列出目录下被打开的文件；\n   +D<目录>：递归列出目录下被打开的文件；\n   -n<目录>：列出使用NFS的文件；\n   -i<条件>：列出符合条件的进程。（4、6、协议、:端口、 @ip ）\n   -p<进程号>：列出指定进程号所打开的文件；\n   -u：列出UID号进程详情；\n   -h：显示帮助信息；\n   -v：显示版本信息。\n   ```\n\n2. 查看某个端口有哪些进程访问\n   \n   ```\n   [root@neustor130 fd]# lsof -i:3306\n    COMMAND     PID  USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME\n    mysqld  1380454 mysql   15u  IPv4 288080856      0t0  TCP *:mysql (LISTEN)\n    mysqld  1380454 mysql   36u  IPv4 310916588      0t0  TCP neustor130:mysql->192.168.55.133:62067 (ESTABLISHED)\n    mysqld  1380454 mysql   37u  IPv4 310916742      0t0  TCP neustor130:mysql->192.168.55.133:62112 (ESTABLISHED)\n    lsof输出各列信息的意义如下：\n    COMMAND：进程的名称\n    PID：进程标识符\n    USER：进程所有者\n    FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等\n    TYPE：文件类型，如DIR、REG等\n    DEVICE：指定磁盘的名称\n    SIZE：文件的大小\n    NODE：索引节点（文件在磁盘上的标识）\n    NAME：打开文件的确切名称\n   ```\n3. fd文件描述符\n   \n   ```\n   cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身       对这个目录进行更改\n   txt：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序\n   lnn：library references (AIX)（库引用）;\n   er：FD information error (see NAME column)（fd信息错误）;\n   jld：jail directory (FreeBSD)（监控目录）;\n   ltx：shared library text (code and data)（共享库文本）;\n   mxx ：hex memory-mapped type number xx（十六进制内存映射类型号xx）；\n   m86：DOS Merge mapped file(DOS合并映射文件);\n   mem：memory-mapped file(内存映射文件);\n   mmap：memory-mapped device（内存映射设备）;\n   pd：parent directory（父目录）;\n   rtd：root directory（跟目录）;\n   tr：kernel trace file (OpenBSD)（内核跟踪文件）;\n   v86 VP/ix mapped file（VP/IX映射文件）;\n   0：表示标准输出\n   1：表示标准输入\n   2：表示标准错误\n   ```\n4. lsof用来恢复日志文件\n   利用lsof可以恢复一些系统或程序日志，前提是这个进程必须存在。\n   如: 恢复系统日志\n   \n   ```\n   1. 备份日志\n   cp /var/log/messages /var/log/messages_bak\n   2. 删除日志\n   rm /var/log/messages\n   3. 删掉之后，我再来看看这个进程的变化,发现多了(deleted)\n   [root@neustor131 ~]# lsof |grep /var/log/messages\n   rsyslogd     **5057**            root    **5w**      REG              253,0    244676   52342621 /var/log/messages (deleted)\n   in:imjour    5057    5093    root    5w      REG              253,0    244676   52342621 /var/log/messages (deleted)\n   rs:main      5057    5101    root    5w      REG              253,0    244676   52342621 /var/log/messages (deleted)\n   4. 通过上面返回的结果可以知道这个文件所在目录为 /proc/5057/fd/5\n   [root@neustor131 ~]# ll /proc/5057/fd/5\n   l-wx------ 1 root root 64 Sep 11 15:37 /proc/5057/fd/5 -> /var/log/messages (deleted)\n   5. 恢复文件\n   cat /proc/5057/fd/5 > /var/log/messages\n   ```\n\n','/articles/2020/09/11/1599811327623.html','0',1599811327675,1599818043416,0.000720100796811507,'1','','https://b3logfile.com/bing/20200724.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1600008748681','言语-逻辑填空','\n','','言语','1556594816141','1. 词的辨析\n   1. 词义侧重\n   2. 固定搭配\n   3. 程度轻重\n      当词语相近时，比较表达意思的轻重\n   4. 感情色彩\n   5. ![image.png](https://b3logfile.com/file/2020/09/image-09c638db.png)\n2. 语境分析\n   1. 关联关系\n      转折，递进![image.png](https://b3logfile.com/file/2020/09/image-4c3df057.png)\n','/articles/2020/09/13/1600008748681.html','0',1600008748733,1600097597900,0.7200747715191047,'1','123456','https://b3logfile.com/file/2020/09/image-09c638db.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100',1),('1600093142000','成语/词语解释','\n','历久弥新  经历长久的时间显得更加的鲜活   望尘莫及  远远望着前面人马行走时扬起来的尘土而追赶不上。比喻远远落在后面   同日而语  放在同一时间谈论，指相提并论   缩影  部分代表整体   象征  具体的东西表示一个抽象的东西   趋之若鹜  像鸭子一样成群跑过去， 比喻许多人争着去追逐   驾轻就熟  做某事很熟悉   南辕北辙  行动与目的相反   方兴未艾 曲意逢迎 拾人牙慧 马放南山 抱恨终天 虎头蛇尾 收据鸟散','常识','1556594816141','1. 历久弥新\n   > 经历长久的时间显得更加的鲜活\n   >\n2. 望尘莫及\n   > 远远望着前面人马行走时扬起来的尘土而追赶不上。比喻远远落在后面\n   >\n3. 同日而语\n   > 放在同一时间谈论，指相提并论\n   >\n4. 缩影\n   > 部分代表整体\n   >\n5. 象征\n   > 具体的东西表示一个抽象的东西\n   >\n6. 趋之若鹜\n   > 像鸭子一样成群跑过去， 比喻许多人争着去追逐\n   >\n7. 驾轻就熟\n   > 做某事很熟悉\n   >\n8. 南辕北辙\n   > 行动与目的相反\n   >\n9. 方兴未艾\n10. 曲意逢迎\n11. 拾人牙慧\n12. 马放南山\n13. 抱恨终天\n14. 虎头蛇尾\n15. 收据鸟散\n','/articles/2020/09/14/1600093142000.html','0',1600093142103,1600516603137,0.2518529559099272,'1','','https://b3logfile.com/bing/20190501.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1600271837519','判断','\n','','判断','1556594816141','1. 数量\n   1. 面数量\n      1. 图形被分割\n      2. 空白留空区域\n      3. 面的形状\n      4. 面的大小\n   2. 线数量\n      1. 直线\n      2. 曲线\n      3. 一笔画\n      4. 基点\n      5. 笔画数=奇点数% 2\n   3. 点数量\n      1. 直线相交\n      2. 曲直相交\n      3. 内外交点\n   4. 元素数量\n      1. 部分数\n      2. 元素总数\n2. 属性\n   1. 组成元素不相同，不相似，考虑属性\n   2. 对称性，开闭性，曲直性\n3. 特殊规律\n   1. 图形间关系\n      两个或多个图形相交或相离，交面的形状\n   2. 功能元素\n      黑点，白点，箭头，小图形![image.png](https://b3logfile.com/file/2020/09/image-8d3135a6.png)\n4. **类比推理**![image.png](https://b3logfile.com/file/2020/09/image-f3154ff7.png)\n   1. 语义关系\n      1. 近义，反义，感情色彩（褒，贬，中性）\n      2. 比喻象征（月亮：玉盘）![image.png](https://b3logfile.com/file/2020/09/image-b900cb96.png)\n      3. 词语拆分\n   2. 逻辑关系\n      1. 全通\n      2. 并列\n      3. 交叉\n      4. 包容\n      5. 对应\n         1. 主要功能，次要功能\n         2. 原材料-加工-成品\n         3. 必然属性\n         4. 时间顺序\n         5. 必要条件（水：生命）\n         6. 因果关系\n   3. 语法关系\n      1. 主谓关系 （学生： 学习\n      2. 动宾关系 （学习：功课\n      3. 主宾关系 （学生：功课\n5. **定义判断**\n   1. 快速识别有效信息\n      * 关键字（主体，客体![image.png](https://b3logfile.com/file/2020/09/image-b359e867.png)\n      * 句式引导词![image.png](https://b3logfile.com/file/2020/09/image-71af7e65.png)\n      * ![image.png](https://b3logfile.com/file/2020/09/image-32bcd737.png)\n   2. 拆词\n      1. 把提问中的词语拆解分别判断选项是否符合![image.png](https://b3logfile.com/file/2020/09/image-fcf4a176.png)\n','/articles/2020/09/16/1600271837519.html','0',1600271837621,1600520752234,0.004021462544680943,'1','123456','https://b3logfile.com/file/2020/09/image-8d3135a6.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100',1),('1600521533748','逻辑判断','\n','','判断','1556594816141','1. **翻译推理**\n   1. 提问方式(可以推出/不能推出)\n   2. ***肯前必肯后，否后必否前***\n   3. ***否前肯后无必然结论***![image.png](https://b3logfile.com/file/2020/09/image-eaeea514.png)\n   4. 只有-才（后推前）\n   5. ![image.png](https://b3logfile.com/file/2020/09/image-45807727.png)\n   6. 且和或\n      1. ![image.png](https://b3logfile.com/file/2020/09/image-a5d48318.png)\n      2. 德。摩根定律![image.png](https://b3logfile.com/file/2020/09/image-47fd4ded.png)\n   7. 总结（四种翻译）![image.png](https://b3logfile.com/file/2020/09/image-d818bf0c.png)![image.png](https://b3logfile.com/file/2020/09/image-bc428955.png)![image.png](https://b3logfile.com/file/2020/09/image-00123de3.png)\n2. **排列组合，真假推理**\n   1. 排除法，代入法\n   2. 条件中出现最多的词语![image.png](https://b3logfile.com/file/2020/09/image-21086d02.png)\n3. 原因解释，加强论证\n   1. 原因解释，提问方式\n      以下哪项为真，最能解释上述矛盾/现象\n   2. 逻辑论证\n      1. 削弱类型：反对\n      2. 加强类型：赞成\n      3. 论证三要素：论点，论据，论证\n4. 削弱论证，日常结论\n','/articles/2020/09/19/1600521533748.html','0',1600521533800,1600788351879,0.7097833749219834,'1','123456','https://b3logfile.com/file/2020/09/image-eaeea514.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100',1),('1609317484090','spring中事务失效的原因','\n','两种自身调用导致的事务不生效   update方法上面没有加 @Transactional 注解，调用有 @Transactional 注解的 updateOrder 方法 @Service public class OrderServiceImpl implements OrderService { public void update(Order order) { updateOrder(order); } @Transactional public void updateOrder(Order order) { // update order； } }    update 方法上加了 @Transactional，updateOrder 加了 REQUIRES_NEW 新开启一个事务 @Service public class OrderServiceImpl implements OrderService { @Transactional public void update(Order order) { updateOrder(order); } @Transactional....','spring','1606976557499','两种自身调用导致的事务不生效\n\n1. update方法上面没有加 `@Transactional` 注解，调用有 `@Transactional` 注解的 updateOrder 方法\n\n   ```\n   @Service\n   public class OrderServiceImpl implements OrderService {\n       public void update(Order order) {\n           updateOrder(order);\n       }\n       @Transactional\n       public void updateOrder(Order order) {\n           // update order；\n       }\n   }\n   ```\n2. update 方法上加了 `@Transactional`，updateOrder 加了 `REQUIRES_NEW` 新开启一个事务\n\n   ```\n   @Service\n   public class OrderServiceImpl implements OrderService {\n       @Transactional\n       public void update(Order order) {\n           updateOrder(order); \n      }\n       @Transactional(propagation = Propagation.REQUIRES_NEW)\n       public void updateOrder(Order order) {\n           // update order；\n       }\n   }\n   ```\n\n\n---\n\nspring事务的传播特性\n\n1. propagation-required: 支持当前事务,如果有就加入当前事务中;如果当前方法没有事务,就新建一个事务;\n2. propagation-supports: 支持当前事务,如果有就加入当前事务中;如果当前方法没有事务,就以非事务的方式执行;\n3. propagation-mandatory: 支持当前事务,如果有就加入当前事务中;如果当前没有事务,就抛出异常;\n4. propagation-requires_new: 新建事务,如果当前存在事务,就把当前事务挂起;如果当前方法没有事务,就新建事务;\n5. propagation-not-supported: 以非事务方式执行,如果当前方法存在事务就挂起当前事务;如果当前方法不存在事务,就以非事务方式执行;\n6. propagation-never: 以非事务方式执行,如果当前方法存在事务就抛出异常;如果当前方法不存在事务,就以非事务方式执行;\n7. propagation-nested: 如果当前方法有事务,则在嵌套事务内执行;如果当前方法没有事务,则与required操作类似;\n','/articles/2020/12/30/1609317484090.html','0',1609317484222,1609317682147,0.0003638435224389003,'1','','https://b3logfile.com/bing/20201211.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1609816803260','https','\n','HTTPS 的安全性是由 TLS 来保证的,TLS为 HTTP 增加了机密性、完整性，身份认证和不可否认等特性   机密性  实现机密性最常用的手段是“加密”,加密分为对称加密和非对称加密,TLS中使用混合加密,非对称加密用于交换秘钥,然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密,对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密.   对称加密 TLS 里有非常多的对称加密算法可供选择，比如 RC4、DES、3DES、AES、ChaCha20 等，但前三种算法都被认为是不安全的，通常都禁止使用，目前常用的只有 AES 和 ChaCha20 非对称加密 在 TLS 里只有很少的几种，比如 DH、DSA、RSA、ECC 等。它有两个密钥，一个叫“公钥”（public key），一个叫“私钥”（private key）。两个密钥是不同的，“不对称”，公钥可以公开给任何人使用，而私钥必须严格保密    完整性  完整性是由摘要算法保证的,只需要在原文后面附上它的摘要信息,就能够保证数据....','待分类','1606976557499','**HTTPS 的安全性是由 TLS 来保证的,TLS为 HTTP 增加了机密性、完整性，身份认证和不可否认等特性**\n\n1. 机密性\n   \n   > 实现机密性最常用的手段是“加密”,加密分为对称加密和非对称加密,TLS中使用混合加密,非对称加密用于交换秘钥,然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密,对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密.\n   \n   1. 对称加密\n      TLS 里有非常多的对称加密算法可供选择，比如 RC4、DES、3DES、AES、ChaCha20 等，但前三种算法都被认为是不安全的，通常都禁止使用，目前常用的只有 AES 和 ChaCha20\n   2. 非对称加密\n      在 TLS 里只有很少的几种，比如 DH、DSA、RSA、ECC 等。它有两个密钥，一个叫“公钥”（public key），一个叫“私钥”（private key）。两个密钥是不同的，“不对称”，公钥可以公开给任何人使用，而私钥必须严格保密\n2. 完整性\n   \n   > 完整性是由摘要算法保证的,只需要在原文后面附上它的摘要信息,就能够保证数据的完整性.目前 TLS 推荐使用的是 SHA-1 的后继者：SHA-2。SHA-2 实际上是一系列摘要算法的统称，总共有 6 种，常用的有 SHA224、SHA256、SHA384，分别能够生成 28 字节、32 字节、48 字节的摘要.\n   > **完整性必须要建立在机密性之上，在混合加密系统里用会话密钥加密消息和摘要，这样黑客无法得知明文**\n3. 身份认证和不可否认\n\n> 数字签名的原理其实很简单，就是把公钥私钥的用法反过来，之前是公钥加密、私钥解密，现在是私钥加密、公钥解密。非对称加密效率太低，所以私钥只加密原文的摘要，这样运算量就小的多\n\n\n\n','/articles/2021/01/05/1609816803260.html','0',1609816803312,1609816803312,0.5449885881956631,'1','','https://b3logfile.com/bing/20200930.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',1),('1609990221216','element @change传递多个参数','\n','val是当前选中的值,args是其它的参数 @change=\"((val)=&gt;{changeEvent(val,args)})\"','elementui','1606976557499','val是当前选中的值,args是其它的参数\n\n```\n@change=\"((val)=>{changeEvent(val,args)})\"\n```\n\n','/articles/2021/01/07/1609990221216.html','0',1609990221286,1609990221286,0.0006996402770043098,'1','','https://b3logfile.com/bing/20191104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1618910239911','git rebase命令','\n','rebase命令有什么用？  对某一段线性提交历史进行编辑、删除、复制、粘贴,可以使提交历史变得更干净,也可以将一个分支上的提交复制到另外一个分支，rebase命令有利有弊，只对尚未推送给别人的本地修改执行变基操作清理历史， 不要对已推送至别处的提交执行变基操作    手动合并多个commit纪录   命令介绍 git rebase -i [startpoint] [endpoint]  其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。   准备工作，如当前develop分支有5次提交，需要把X Y Z三次提交合并为一个commit [root@neustor130 gittest]# git log commit 8506ec53c741cb958942c52efb427b139928c80e Author: wang &lt;wang@163.com....','git','1606976557499','### rebase命令有什么用？\n\n> **对某一段线性提交历史进行编辑、删除、复制、粘贴**,**可以使提交历史变得更干净,也可以将一个分支上的提交复制到另外一个分支，rebase命令有利有弊，只对尚未推送给别人的本地修改执行变基操作清理历史， 不要对已推送至别处的提交执行变基操作**\n\n1. 手动合并多个commit纪录\n   \n   1. 命令介绍\n      \n      ```\n      git rebase -i [startpoint] [endpoint]\n      ```\n      \n      其中-i的意思是--interactive，即弹出交互式的界面让用户编辑完成合并操作，[startpoint] [endpoint]则指定了一个编辑区间，如果不指定[endpoint]，则该区间的终点默认是当前分支HEAD所指向的commit(注：该区间指定的是一个前开后闭的区间)。\n   2. 准备工作，如当前develop分支有5次提交，需要把X Y Z三次提交合并为一个commit\n      \n      ```\n      [root@neustor130 gittest]# git log\n      commit 8506ec53c741cb958942c52efb427b139928c80e\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 16:00:18 2021 +0800\n      \n          Z\n      \n      commit 9efdc54eb2ed8fded108bea394433319a71b9ffe\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:59:10 2021 +0800\n      \n          Y\n      \n      commit b907ffae02a2689c845d72f5d887023ccca857b8\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:58:57 2021 +0800\n      \n          X\n      \n      commit 0a44785ebba098c9e92521082caa4560686cfb51\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:24:02 2021 +0800\n      \n          B\n      \n      commit 209ff3e50ca5a01a7a03235ab41b2efb660bb0ae\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:22:42 2021 +0800\n      \n          A\n      ```\n   3. 命令分析\n      \n      ```\n      git rebase -i [startpoint] [endpoint] //前开后闭\n      [root@wang gittest]# git rebase -i 0a44785ebb 8506ec53c\n      # 编辑文件如下：表示只保留一个提交，保存文件退出，然后会让你修改commit信息，不修改的话直接保存突出就行\n      \n      p b907ffa X\n      s 9efdc54 Y\n      s 8506ec5 Z\n      \n      # Rebase 0a44785..8506ec5 onto 0a44785\n      #\n      # Commands:\n      # pick：保留该commit（缩写：p）\n      # reword：保留该commit，但我需要修改该commit的注释（缩写：r）\n      # edit：保留该commit, 但我要停下来修改该提交（不仅仅修改注释）（缩写：e）\n      # squash：将该commit和前一个commit合并（缩写：s）\n      # fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写：f）\n      # exec：执行shell命令（缩写：x）\n      # drop：我要丢弃该commit（缩写：d）\n      \n      [root@wang gittest]# git log\n      commit 1bf8f890356894b749ac095cb083769aa16e5248\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:58:57 2021 +0800\n      \n          X\n      \n          Y\n      \n          Z\n      \n      commit 0a44785ebba098c9e92521082caa4560686cfb51\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:24:02 2021 +0800\n      \n          B\n      \n      commit 209ff3e50ca5a01a7a03235ab41b2efb660bb0ae\n      Author: wang <wang@163.com>\n      Date:   Tue Apr 20 15:22:42 2021 +0800\n      \n          A\n      ```\n2. 将一个分支与另一个分支合并\n   如下所示：一共有两个分支，master分支有A B C D四次提交，develop有A B X Y Z五次提交，他们有共同的祖先B,如果想把develop分支合并到master分支，可以使用merge操作，但是merge会生成一个新的commit，如果想要合并的结果是一条直线，那就可以使用 `rebase`命令。（rebase/变基，个人理解就是以谁为基准，比如 `git rebase master develop ，master就是基，`master分支有A B C D四个提交，那这四个提交是不变的，只会把develop分支的X Y Z三个提交放到master分支D提交的后面）\n   \n   ```bash\n   1. git rebase master develop //基于master分支，将mater分支合并到develop\n   2. git merge develop master //将develop快速合并到master分支，此时两个分支的提交完全一样\n   ```\n   \n   ```\n   [root@wang gittest]# git log --all --graph --decorate\n   * commit 8506ec53c741cb958942c52efb427b139928c80e (develop)\n   | Author: wang <wang@163.com>\n   | Date:   Tue Apr 20 16:00:18 2021 +0800\n   | \n   |     Z\n   |  \n   * commit 9efdc54eb2ed8fded108bea394433319a71b9ffe\n   | Author: wang <wang@163.com>\n   | Date:   Tue Apr 20 15:59:10 2021 +0800\n   | \n   |     Y\n   |  \n   * commit b907ffae02a2689c845d72f5d887023ccca857b8\n   | Author: wang <wang@163.com>\n   | Date:   Tue Apr 20 15:58:57 2021 +0800\n   | \n   |     X\n   |  \n   | * commit ebfd2e906d626b22eecf49860beac5eb90beb927 (HEAD, master)\n   | | Author: wang <wang@163.com>\n   | | Date:   Tue Apr 20 15:41:52 2021 +0800\n   | | \n   | |     D\n   | |   \n   | * commit d5129071d5bca3c6f64ef55f2aaf9a07fe855e83\n   |/  Author: wang <wang@163.com>\n   |   Date:   Tue Apr 20 15:41:43 2021 +0800\n   |   \n   |       C\n   |  \n   * commit 0a44785ebba098c9e92521082caa4560686cfb51\n   | Author: wang <wang@163.com>\n   | Date:   Tue Apr 20 15:24:02 2021 +0800\n   | \n   |     B\n   |  \n   * commit 209ff3e50ca5a01a7a03235ab41b2efb660bb0ae\n     Author: wang <wang@163.com>\n     Date:   Tue Apr 20 15:22:42 2021 +0800\n   \n         A\n   ```\n3. 将一个分支的某一段commit复制到另一个分支\n   还是以上图为例，如果要把develop上的X Y两个提交复制到master分支，可以使用以下命令(如果只是合并一个commit的话可以使用git cherry-pick命令):\n   \n   ```\n   git rebase [startpoint] [endpoint] --onto [branchName] //[startpoint] [endpoint]指定了一个编辑区间（前开后闭）,为了包含X提交，我们指定的startpoint为X提交的上一个提交\n   git rebase ebfd2e906d626b22eecf49860beac5eb90beb927 9efdc54eb2ed8fded108bea394433319a71b9ffe --onto master\n   \n   执行完以上命令之后，当前HEAD处于游离状态，还需执行以下操作\n   \n   [root@wang gittest]# git status\n   # HEAD detached from ebfd2e9\n   nothing to commit, working directory clean\n   [root@wang gittest]# git branch\n   * (detached from ebfd2e9)\n     develop\n     master\n   [root@wang gittest]# git checkout master\n   Warning: you are leaving 1 commit behind, not connected to\n   any of your branches:\n   \n     43a199f Y\n   [root@wang gittest]# git reset --hard 43a199f5718f899e8a1e936a8cd65ff423e4e88f\n   HEAD is now at 43a199f Y\n   ```\n\n---\n\n> 感谢阅读，如有疑问或者错误的地方，请给我留言。\n\n','/articles/2021/04/20/1618910239911.html','0',1618910239963,1618910239963,0.0003781440052553764,'1','','https://b3logfile.com/bing/20181106.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1618976000860','vue.js watch深度监听','\n','这里watch的是一个对象，如果需要观察到对象里属性值得变化，需要将 deep 参数置为true，代表的是深度监听; hander代表的是watch的对象发生变化之后要做的事情； watch 的一个特点是，最初绑定的时候是不会执行的，因此如果需要开始就执行一次的话就需要把 immediate 参数置为true  &lt;div&gt; &lt;p&gt;obj.param1: {{obj.param1}}&lt;/p&gt; &lt;p&gt;obj.param1: &lt;input type=\"text\" v-model=\"obj.param1\"&gt;&lt;/p&gt; &lt;/div&gt; new Vue({ el: \'#root\', data: { obj: { param1: \'\', param2: \'\' } }, watch: { obj: { handler(newName, oldName) { console.log(\'object changed\'); }, immediate: true, deep: true } } })','vue','1606976557499','> 这里watch的是一个对象，如果需要观察到对象里属性值得变化，需要将 `deep` 参数置为true，代表的是深度监听;\n> \n> `hander `代表的是watch的对象发生变化之后要做的事情；\n> \n> watch 的一个特点是，最初绑定的时候是不会执行的，因此如果需要开始就执行一次的话就需要把 `immediate` 参数置为true\n\n```\n<div>\n      <p>obj.param1: {{obj.param1}}</p>\n      <p>obj.param1: <input type=\"text\" v-model=\"obj.param1\"></p>\n</div>\n \nnew Vue({\n  el: \'#root\',\n  data: {\n    obj: {\n      param1: \'\',\n      param2: \'\'\n    }\n  },\n  watch: {\n    obj: {\n      handler(newName, oldName) {\n         console.log(\'object changed\');\n      },\n      immediate: true,\n      deep: true\n    }\n  } \n})\n```\n\n','/articles/2021/04/21/1618976000860.html','0',1618976000912,1618976000912,0.0007512758237826489,'1','','https://b3logfile.com/bing/20200329.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100',0),('1624529804489','自制机箱','\n','表面上，这是个纸盒子  实际上。。。。。。 这是台电脑（有点丑的电脑）   再来个整体最终效果   您的浏览器不支持 HTML5 video 标签。','组装电脑','1606976557499','表面上，这是个纸盒子\n\n![image.png](https://b3logfile.com/file/2021/06/image-9ec626cd.png)\n\n实际上。。。。。。\n\n这是台电脑（有点丑的电脑）\n\n![image.png](https://b3logfile.com/file/2021/06/image-6c179269.png)\n\n![image.png](https://b3logfile.com/file/2021/06/image-01366ce6.png)\n\n再来个整体最终效果\n\n\n<video width=\"320\" height=\"240\" controls>\n  <source src=\"https://b3logfile.com/file/2021/06/97c2346c712b80e2cfbfa74f58d62f2f-5cc83e08.mp4\" type=\"video/mp4\">\n  您的浏览器不支持 HTML5 video 标签。\n</video>\n','/articles/2021/06/24/1624529804489.html','0',1624529804724,1624529804724,0.0012969904359918516,'1','','https://b3logfile.com/file/2021/06/image-9ec626cd.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100',0);
/*!40000 ALTER TABLE `b3_solo_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_category`
--

DROP TABLE IF EXISTS `b3_solo_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_category` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `categoryTitle` varchar(64) NOT NULL COMMENT '分类标题',
  `categoryURI` varchar(255) NOT NULL COMMENT '分类访问路径',
  `categoryDescription` text NOT NULL COMMENT '分类描述',
  `categoryOrder` int(11) NOT NULL COMMENT '分类展现的排序',
  `categoryTagCnt` int(11) NOT NULL COMMENT '分类下聚合的标签计数',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分类表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_category`
--

LOCK TABLES `b3_solo_category` WRITE;
/*!40000 ALTER TABLE `b3_solo_category` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_category_tag`
--

DROP TABLE IF EXISTS `b3_solo_category_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_category_tag` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `category_oId` varchar(19) NOT NULL COMMENT '分类 id',
  `tag_oId` varchar(19) NOT NULL COMMENT '标签 id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='分类-标签关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_category_tag`
--

LOCK TABLES `b3_solo_category_tag` WRITE;
/*!40000 ALTER TABLE `b3_solo_category_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_category_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_comment`
--

DROP TABLE IF EXISTS `b3_solo_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_comment` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `commentContent` text NOT NULL COMMENT '评论内容',
  `commentCreated` bigint(20) NOT NULL COMMENT '评论时间戳',
  `commentName` varchar(50) NOT NULL COMMENT '评论人名称',
  `commentOnId` varchar(19) NOT NULL COMMENT '评论的文章/页面的 id',
  `commentSharpURL` varchar(255) NOT NULL COMMENT '评论访问路径，带 # 锚点',
  `commentThumbnailURL` text NOT NULL COMMENT '评论人头像图片链接地址',
  `commentURL` varchar(255) NOT NULL COMMENT '评论人链接地址',
  `commentOriginalCommentId` varchar(19) DEFAULT NULL COMMENT '评论回复时原始的评论 id，即父评论 id',
  `commentOriginalCommentName` varchar(50) DEFAULT NULL COMMENT '评论回复时原始的评论人名称，即父评论人名称',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='评论表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_comment`
--

LOCK TABLES `b3_solo_comment` WRITE;
/*!40000 ALTER TABLE `b3_solo_comment` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_link`
--

DROP TABLE IF EXISTS `b3_solo_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_link` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `linkAddress` varchar(255) NOT NULL COMMENT '链接地址',
  `linkDescription` varchar(255) NOT NULL COMMENT '链接描述',
  `linkOrder` int(11) NOT NULL COMMENT '链接展现的排序',
  `linkTitle` varchar(255) NOT NULL COMMENT '链接标题',
  `linkIcon` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='链接表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_link`
--

LOCK TABLES `b3_solo_link` WRITE;
/*!40000 ALTER TABLE `b3_solo_link` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_option`
--

DROP TABLE IF EXISTS `b3_solo_option`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_option` (
  `oId` varchar(64) NOT NULL COMMENT '主键',
  `optionValue` text NOT NULL COMMENT '配置项值',
  `optionCategory` varchar(128) NOT NULL COMMENT '配置项分类',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='配置项';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_option`
--

LOCK TABLES `b3_solo_option` WRITE;
/*!40000 ALTER TABLE `b3_solo_option` DISABLE KEYS */;
INSERT INTO `b3_solo_option` VALUES ('allowVisitDraftViaPermalink','false','preference'),('articleListDisplayCount','20','preference'),('articleListPaginationWindowSize','15','preference'),('articleListStyle','titleAndAbstract','preference'),('autoSpace','false','preference'),('blogSubtitle','记录精彩的程序人生','preference'),('blogTitle','王军会的个人博客','preference'),('chinesePunct','false','preference'),('customVars','key0=val0|key1=val1|key2=val2','preference'),('editorMode','wysiwyg','preference'),('enableArticleUpdateHint','true','preference'),('externalRelevantArticlesDisplayCount','0','preference'),('faviconURL','http://img0.imgtn.bdimg.com/it/u=1643327375,3929392397&fm=26&gp=0.jpg','preference'),('feedOutputCnt','10','preference'),('feedOutputMode','abstract','preference'),('fixTermTypo','false','preference'),('footerContent','豫ICP备15028701号-3','preference'),('footnotes','false','preference'),('githubPAT','','preference'),('githubRepos','[{\"githubrepoId\":\"153605521\",\"githubrepoStatus\":0,\"oId\":\"1603765496183\",\"githubrepoDescription\":\"数据库自动备份\",\"githubrepoHomepage\":\"\",\"githubrepoForksCount\":0,\"githubrepoOwnerId\":\"24625465\",\"githubrepoStargazersCount\":0,\"githubrepoWatchersCount\":0,\"githubrepoOwnerLogin\":\"wjhstd\",\"githubrepoHTMLURL\":\"https://github.com/wjhstd/sqlback\",\"githubrepoLanguage\":\"\",\"githubrepoUpdated\":1603765492230,\"githubrepoName\":\"sqlback\",\"githubrepoFullName\":\"wjhstd/sqlback\"},{\"githubrepoId\":\"130040547\",\"githubrepoStatus\":0,\"oId\":\"1603765496291\",\"githubrepoDescription\":\"\",\"githubrepoHomepage\":\"\",\"githubrepoForksCount\":0,\"githubrepoOwnerId\":\"24625465\",\"githubrepoStargazersCount\":0,\"githubrepoWatchersCount\":0,\"githubrepoOwnerLogin\":\"wjhstd\",\"githubrepoHTMLURL\":\"https://github.com/wjhstd/showmecode\",\"githubrepoLanguage\":\"Java\",\"githubrepoUpdated\":1603765492230,\"githubrepoName\":\"showmecode\",\"githubrepoFullName\":\"wjhstd/showmecode\"},{\"githubrepoId\":\"167129841\",\"githubrepoStatus\":0,\"oId\":\"1603765496398\",\"githubrepoDescription\":\"\",\"githubrepoHomepage\":\"\",\"githubrepoForksCount\":0,\"githubrepoOwnerId\":\"24625465\",\"githubrepoStargazersCount\":0,\"githubrepoWatchersCount\":0,\"githubrepoOwnerLogin\":\"wjhstd\",\"githubrepoHTMLURL\":\"https://github.com/wjhstd/sw_traffic_ansible\",\"githubrepoLanguage\":\"Shell\",\"githubrepoUpdated\":1603765492230,\"githubrepoName\":\"sw_traffic_ansible\",\"githubrepoFullName\":\"wjhstd/sw_traffic_ansible\"},{\"githubrepoId\":\"102084247\",\"githubrepoStatus\":0,\"oId\":\"1603765496502\",\"githubrepoDescription\":\"\",\"githubrepoHomepage\":\"\",\"githubrepoForksCount\":0,\"githubrepoOwnerId\":\"24625465\",\"githubrepoStargazersCount\":0,\"githubrepoWatchersCount\":0,\"githubrepoOwnerLogin\":\"wjhstd\",\"githubrepoHTMLURL\":\"https://github.com/wjhstd/springmvcRestFul\",\"githubrepoLanguage\":\"Java\",\"githubrepoUpdated\":1603765492230,\"githubrepoName\":\"springmvcRestFul\",\"githubrepoFullName\":\"wjhstd/springmvcRestFul\"}]','github'),('hljsTheme','github','preference'),('htmlHead','','preference'),('inlineMathAllowDigitAfterOpenMarker','false','preference'),('localeString','zh_CN','preference'),('metaDescription','','preference'),('metaKeywords','Java,博客,开源','preference'),('mobileSkinDirName','Pinghsu','skin'),('mostUsedTagDisplayCount','20','preference'),('noticeBoard','<script>\n(function(){\n    var bp = document.createElement(\'script\');\n    var curProtocol = window.location.protocol.split(\':\')[0];\n    if (curProtocol === \'https\') {\n        bp.src = \'https://zz.bdstatic.com/linksubmit/push.js\';\n    }\n    else {\n        bp.src = \'http://push.zhanzhang.baidu.com/push.js\';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n\n\n<!-- 公告栏可使用 HTML、JavaScript，比如可以在此加入第三方统计 js -->','preference'),('paragraphBeginningSpace','false','preference'),('pullGitHub','true','preference'),('randomArticlesDisplayCount','5','preference'),('recentArticleDisplayCount','','preference'),('relevantArticlesDisplayCount','5','preference'),('showCodeBlockLn','false','preference'),('showToC','false','preference'),('signs','[{\"signHTML\":\"\",\"oId\":0},{\"signHTML\":\"<hr>\\n\\n标题：{title}<br>\\n作者：<a href=\\\"{blog}\\\" target=\\\"_blank\\\">{author}<\\/a><br>\\n地址：<a href=\\\"{url}\\\" target=\\\"_blank\\\">{url}<\\/a><br>\\n\\n<!-- 签名档内可使用 HTML、JavaScript -->\\n<br>\",\"oId\":1},{\"signHTML\":\"<hr>\\n\\n标题：{title}<br>\\n作者：<a href=\\\"{blog}\\\" target=\\\"_blank\\\">{author}<\\/a><br>\\n地址：<a href=\\\"{url}\\\" target=\\\"_blank\\\">{url}<\\/a><br>\\n\\n<!-- 签名档内可使用 HTML、JavaScript -->\\n<br>\",\"oId\":2},{\"signHTML\":\"<hr>\\n\\n标题：{title}<br>\\n作者：<a href=\\\"{blog}\\\" target=\\\"_blank\\\">{author}<\\/a><br>\\n地址：<a href=\\\"{url}\\\" target=\\\"_blank\\\">{url}<\\/a><br>\\n\\n<!-- 签名档内可使用 HTML、JavaScript -->\\n<br>\",\"oId\":3}]','preference'),('skinDirName','9IPHP','skin'),('speech','false','preference'),('statisticBlogViewCount','36991','statistic'),('syncGitHub','false','preference'),('timeZoneId','Asia/Shanghai','preference'),('usite','{\"usiteUserId\":\"1606976446597\",\"usiteWeiBo\":\"\",\"usiteQQMusic\":\"\",\"usiteStackOverflow\":\"\",\"usiteDribbble\":\"\",\"usiteGitHub\":\"\",\"usiteMedium\":\"\",\"usiteTwitter\":\"\",\"usiteQQ\":\"\",\"usiteLinkedIn\":\"\",\"usiteSteam\":\"\",\"usiteInstagram\":\"\",\"usiteCodePen\":\"\",\"usiteWYMusic\":\"\",\"usiteWeChat\":\"\",\"usiteZhiHu\":\"\",\"usiteBehance\":\"\",\"usiteTelegram\":\"\",\"usiteFacebook\":\"\"}','hacpai'),('version','4.3.1','preference');
/*!40000 ALTER TABLE `b3_solo_option` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_page`
--

DROP TABLE IF EXISTS `b3_solo_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_page` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `pageOrder` int(11) NOT NULL COMMENT '页面展现排序',
  `pagePermalink` varchar(255) NOT NULL COMMENT '页面访问路径',
  `pageTitle` varchar(255) NOT NULL COMMENT '页面标题',
  `pageOpenTarget` varchar(255) NOT NULL COMMENT '页面打开方式',
  `pageIcon` varchar(255) NOT NULL COMMENT '页面展示用小图标',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='自定义页面表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_page`
--

LOCK TABLES `b3_solo_page` WRITE;
/*!40000 ALTER TABLE `b3_solo_page` DISABLE KEYS */;
/*!40000 ALTER TABLE `b3_solo_page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_plugin`
--

DROP TABLE IF EXISTS `b3_solo_plugin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_plugin` (
  `oId` varchar(128) NOT NULL COMMENT '主键',
  `author` text NOT NULL COMMENT '插件作者',
  `name` varchar(255) NOT NULL COMMENT '插件名称',
  `status` varchar(10) NOT NULL COMMENT '插件状态，启用：ENABLED，禁用：DISABLED',
  `version` varchar(10) NOT NULL COMMENT '插件版本',
  `setting` text COMMENT '插件配置，JSON 字符串',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='插件表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_plugin`
--

LOCK TABLES `b3_solo_plugin` WRITE;
/*!40000 ALTER TABLE `b3_solo_plugin` DISABLE KEYS */;
INSERT INTO `b3_solo_plugin` VALUES ('Symphony Interest_0.0.1','<a href=\"http://88250.b3log.org\">88250</a>','Symphony Interest','ENABLED','0.0.1','{}'),('Table of Contents Generator_1.0.1','<a href=\"http://88250.b3log.org\">88250</a>','Table of Contents Generator','ENABLED','1.0.1','{}'),('看板娘_0.0.1','<a href=\"http://vanessa.b3log.org\">Vanessa</a>','看板娘','DISABLED','0.0.1','{}');
/*!40000 ALTER TABLE `b3_solo_plugin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_tag`
--

DROP TABLE IF EXISTS `b3_solo_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_tag` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `tagTitle` varchar(255) NOT NULL COMMENT '标签标题',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='标签表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_tag`
--

LOCK TABLES `b3_solo_tag` WRITE;
/*!40000 ALTER TABLE `b3_solo_tag` DISABLE KEYS */;
INSERT INTO `b3_solo_tag` VALUES ('1556596262409','存储'),('1556596357983','python'),('1556596393922','linux'),('1556596434788','docker'),('1556596469665','ansible'),('1556596619775','maven'),('1556596641948','待分类'),('1556596677824','vue'),('1556596835097','java'),('1556596861645','nvidia'),('1556597029739','mysql'),('1556597495642','video.js'),('1556597576354','转载'),('1556597671476','spring'),('1556597714355','其它'),('1556597905758','springboot'),('1556598173579','bootstrap'),('1556598192972','windows'),('1561696028239','js'),('1562038406666','mybatis'),('1576049668199','elementui'),('1576049827709','git'),('1595777765235','行测'),('1595864940191','画'),('1596119248467','地球运动'),('1596382727495','每日练字'),('1597161843399','每日英语'),('1599573926463','言语'),('1599639802939','计算机网络'),('1600093142052','常识'),('1600271837570','判断'),('1624529804605','组装电脑');
/*!40000 ALTER TABLE `b3_solo_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_tag_article`
--

DROP TABLE IF EXISTS `b3_solo_tag_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_tag_article` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `article_oId` varchar(19) NOT NULL COMMENT '文章 id',
  `tag_oId` varchar(19) NOT NULL COMMENT '标签 id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='标签-文章关联表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_tag_article`
--

LOCK TABLES `b3_solo_tag_article` WRITE;
/*!40000 ALTER TABLE `b3_solo_tag_article` DISABLE KEYS */;
INSERT INTO `b3_solo_tag_article` VALUES ('1556596262460','1556596262355','1556596262409'),('1556596358037','1556596357932','1556596357983'),('1556596393973','1556596393870','1556596393922'),('1556596434841','1556596434737','1556596434788'),('1556596469717','1556596469614','1556596469665'),('1556596494972','1556596494920','1556596434788'),('1556596542059','1556596523393','1556596434788'),('1556596563982','1556596563930','1556596393922'),('1556596596683','1556596596631','1556596393922'),('1556596619828','1556596619723','1556596619775'),('1556596642000','1556596641898','1556596641948'),('1556596677878','1556596671249','1556596677824'),('1556596698665','1556596698613','1556596641948'),('1556596733207','1556596733155','1556596393922'),('1556596764858','1556596764806','1556596393922'),('1556596791865','1556596791813','1556596393922'),('1556596811522','1556596811470','1556596677824'),('1556596835148','1556596835045','1556596835097'),('1556596861696','1556596861593','1556596393922'),('1556596861747','1556596861593','1556596861645'),('1556596894863','1556596885650','1556596393922'),('1556596921783','1556596921731','1556596835097'),('1556596944954','1556596944902','1556596677824'),('1556596969045','1556596968993','1556596835097'),('1556597006678','1556597006626','1556596434788'),('1556597029790','1556597029688','1556597029739'),('1556597075783','1556597075731','1556596393922'),('1556597100040','1556597099988','1556596677824'),('1556597259871','1556597259818','1556596835097'),('1556597289647','1556597289595','1556596434788'),('1556597317382','1556597317330','1556596434788'),('1556597350409','1556597350358','1556596619775'),('1556597375878','1556597375826','1556596393922'),('1556597397889','1556597397837','1556596835097'),('1556597424266','1556597424214','1556596835097'),('1556597449009','1556597448957','1556596393922'),('1556597471963','1556597471911','1556596677824'),('1556597495694','1556597495591','1556597495642'),('1556597518608','1556597518556','1556596677824'),('1556597542397','1556597542345','1556596393922'),('1556597576405','1556597576302','1556596835097'),('1556597576456','1556597576302','1556597576354'),('1556597596678','1556597596626','1556596677824'),('1556597671527','1556597671424','1556596835097'),('1556597671580','1556597671424','1556597671476'),('1556597690089','1556597690037','1556596835097'),('1556597714412','1556597714304','1556597714355'),('1556597737051','1556597736999','1556596835097'),('1556597763639','1556597763587','1556596677824'),('1556597791154','1556597791101','1556596835097'),('1556597791205','1556597791101','1556597671476'),('1556597812779','1556597812726','1556596393922'),('1556597834746','1556597834695','1556596835097'),('1556597881430','1556597881370','1556596835097'),('1556597881481','1556597881370','1556597671476'),('1556597905809','1556597905706','1556596835097'),('1556597905860','1556597905706','1556597905758'),('1556597930517','1556597930465','1556596835097'),('1556597930576','1556597930465','1556597905758'),('1556597960148','1556597960094','1556596835097'),('1556597984781','1556597984728','1556596835097'),('1556597984832','1556597984728','1556597905758'),('1556598007346','1556598007294','1556596835097'),('1556598031477','1556598031426','1556596619775'),('1556598056048','1556598055996','1556596393922'),('1556598080899','1556598080848','1556596619775'),('1556598101713','1556598101661','1556596835097'),('1556598125937','1556598125885','1556596677824'),('1556598147759','1556598147706','1556596835097'),('1556598147812','1556598147706','1556597905758'),('1556598173630','1556598173527','1556598173579'),('1556598193024','1556598192921','1556598192972'),('1556598212242','1556598212191','1556596677824'),('1556598233063','1556598233011','1556597029739'),('1556598252254','1556598252203','1556597029739'),('1556598273894','1556598273842','1556596677824'),('1557371972768','1557371972715','1556597029739'),('1561696028290','1561696028187','1556596677824'),('1561696028340','1561696028187','1561696028239'),('1562038406718','1562038406615','1562038406666'),('1562038406769','1562038406615','1556597671476'),('1570593659803','1570593659752','1556596677824'),('1570594803143','1570594803091','1556596641948'),('1576049668250','1576049668148','1556596677824'),('1576049668301','1576049668148','1576049668199'),('1576049827760','1576049827658','1576049827709'),('1576050228796','1576050228745','1556597029739'),('1576121885292','1576121885241','1556597029739'),('1581068229759','1581068229696','1556596677824'),('1595084400605','1595084400553','1556596641948'),('1595088382048','1595088381996','1556596641948'),('1595777765297','1595777765184','1595777765235'),('1595864940242','1595864940138','1595777765235'),('1595864940293','1595864940138','1595864940191'),('1595946744236','1595946744185','1556596641948'),('1596031678913','1596031678861','1556596641948'),('1596119248518','1596119248415','1595777765235'),('1596119248575','1596119248415','1596119248467'),('1596257551706','1596257551654','1556596641948'),('1596338434633','1596338434581','1556596641948'),('1596360977613','1596360977561','1556596641948'),('1596364302404','1596271612481','1595777765235'),('1596382727546','1596382727444','1596382727495'),('1596460633119','1596460633066','1556596641948'),('1596470957492','1596470957440','1596382727495'),('1596641885705','1596641885653','1596382727495'),('1596730122201','1596730122149','1596382727495'),('1596818250537','1596818250484','1596382727495'),('1596988456418','1596988456366','1596382727495'),('1597161345501','1597161345449','1596382727495'),('1597161843450','1595473455262','1597161843399'),('1597515723655','1597515723604','1596382727495'),('1597580375997','1597580375945','1556596641948'),('1597591639727','1597591639675','1596382727495'),('1597631658928','1597631658876','1556596393922'),('1597938904255','1597938904204','1596382727495'),('1598199031615','1598199031563','1596382727495'),('1598948074244','1598948074188','1556596393922'),('1599573926514','1599573926412','1599573926463'),('1599620870558','1599620870505','1556596677824'),('1599623436314','1599623436262','1556596677824'),('1599623898641','1599623898589','1556596677824'),('1599639802990','1599639802888','1599639802939'),('1599706260242','1599706260190','1556596393922'),('1599706890373','1599706890321','1556596393922'),('1599711857955','1599711857903','1556596393922'),('1599724495963','1599724495911','1556596393922'),('1599749202843','1599749202791','1599573926463'),('1599811327675','1599811327623','1556596393922'),('1600008748733','1600008748681','1599573926463'),('1600093142103','1600093142000','1600093142052'),('1600271837621','1600271837519','1600271837570'),('1600521533800','1600521533748','1600271837570'),('1609317484223','1609317484090','1556597671476'),('1609816803312','1609816803260','1556596641948'),('1609990221287','1609990221216','1576049668199'),('1618910239963','1618910239911','1576049827709'),('1618976000912','1618976000860','1556596677824'),('1624529804724','1624529804489','1624529804605');
/*!40000 ALTER TABLE `b3_solo_tag_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `b3_solo_user`
--

DROP TABLE IF EXISTS `b3_solo_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `b3_solo_user` (
  `oId` varchar(19) NOT NULL COMMENT '主键',
  `userName` varchar(255) NOT NULL COMMENT '用户名',
  `userURL` varchar(255) NOT NULL COMMENT '用户链接地址',
  `userRole` varchar(255) NOT NULL COMMENT '用户角色，管理员：adminRole，普通用户：defaultRole，访客用户：visitorRole',
  `userAvatar` varchar(255) NOT NULL COMMENT '用户头像图片链接地址',
  `userB3Key` varchar(64) NOT NULL COMMENT 'B3log Key',
  `userGitHubId` varchar(32) NOT NULL COMMENT '用户 GitHub Open Id',
  PRIMARY KEY (`oId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `b3_solo_user`
--

LOCK TABLES `b3_solo_user` WRITE;
/*!40000 ALTER TABLE `b3_solo_user` DISABLE KEYS */;
INSERT INTO `b3_solo_user` VALUES ('111','iwjh','http://111.229.202.101','adminRole','imageView2/1/w/128/h/128/interlace/0/q/100','iwjh','1606976446597'),('1556610388581','ityousee','http://www.ityousee.com','visitorRole','https://avatars2.githubusercontent.com/u/50133886?v=4','50133886','50133886'),('1606976557499','wangjunhui','http://www.ityousee.com','adminRole','https://b3logfile.com/avatar/1606976446597.png?imageView2/1/w/128/h/128/interlace/0/q/100','wangjunhui','1606976446597'),('1637047700757','iwjh','http://111.229.202.101','visitorRole','https://b3logfile.com/avatar/1637047511162.png?imageView2/1/w/128/h/128/interlace/0/q/100','iwjh','1637047511162');
/*!40000 ALTER TABLE `b3_solo_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-04-17  8:34:01
